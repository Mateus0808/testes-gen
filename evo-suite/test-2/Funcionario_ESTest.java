/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 15 17:38:31 GMT 2024
 */

package com.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.example.EstoqueDeProdutos;
import com.example.Funcionario;
import com.example.Produto;
import com.example.ProdutoUnitario;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Funcionario_ESTest extends Funcionario_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Funcionario funcionario0 = new Funcionario((String) null, (String) null, (String) null);
      String string0 = funcionario0.getUserName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Funcionario funcionario0 = new Funcionario("CIc=", "CIc=", "CIc=");
      String string0 = funcionario0.getUserName();
      assertEquals("CIc=", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Funcionario funcionario0 = new Funcionario("id|", "id|", (String) null);
      String string0 = funcionario0.getSenha();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Funcionario funcionario0 = new Funcionario((String) null, "", "");
      String string0 = funcionario0.getSenha();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Funcionario funcionario0 = new Funcionario("", "", "");
      funcionario0.setNome((String) null);
      String string0 = funcionario0.getNome();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Funcionario funcionario0 = new Funcionario("$\"(B2IN7`{f%TtKNG=", "t02'a[;iTB%[r,o", "t02'a[;iTB%[r,o");
      EstoqueDeProdutos.estoque = null;
      // Undeclared exception!
      try { 
        funcionario0.removerProduto("", 863.528937269455);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.example.EstoqueDeProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Funcionario funcionario0 = new Funcionario("CIc=", "CIc=", "CIc=");
      // Undeclared exception!
      try { 
        funcionario0.adicionarProduto((Produto) null, 1.5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.example.EstoqueDeProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Funcionario funcionario0 = new Funcionario("", "", "?=fr9eYl");
      funcionario0.setNome("S");
      String string0 = funcionario0.getNome();
      assertEquals("S", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Funcionario funcionario0 = new Funcionario("", "", "?=fr9eYl");
      String string0 = funcionario0.getNome();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Funcionario funcionario0 = new Funcionario("", "", "?=fr9eYl");
      String string0 = funcionario0.getUserName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Funcionario funcionario0 = new Funcionario("", "", "?=fr9eYl");
      funcionario0.mostrarEstoque();
      assertEquals("?=fr9eYl", funcionario0.getSenha());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Funcionario funcionario0 = new Funcionario("", "", "?=fr9eYl");
      funcionario0.removerProduto("com.example.Funcionario", 1142.713522348);
      assertEquals("?=fr9eYl", funcionario0.getSenha());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Funcionario funcionario0 = new Funcionario("", "", "?=fr9eYl");
      funcionario0.setSenha("S");
      assertEquals("", funcionario0.getNome());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Funcionario funcionario0 = new Funcionario("", "", "?=fr9eYl");
      ProdutoUnitario produtoUnitario0 = new ProdutoUnitario("y6Rwj!232){yQn'5", "_32~_a2LfG?", (-709.222305661));
      funcionario0.adicionarProduto(produtoUnitario0, 0.0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Funcionario funcionario0 = new Funcionario("", "", "?=fr9eYl");
      funcionario0.setUserName("U(K9tUjL[\n~GZKm");
      assertEquals("", funcionario0.getNome());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Funcionario funcionario0 = new Funcionario("", "", "?=fr9eYl");
      funcionario0.getSenha();
      funcionario0.setNome("S");
      EstoqueDeProdutos.removerProduto("com.example.Funcionario", 0.0);
      funcionario0.removerProduto("com.example.Funcionario", 1142.713522348);
      EstoqueDeProdutos.removerProduto("*  ATEN\u00C7\u00C3O! O estoque desse produto acabou: ", (-1.0));
      funcionario0.removerProduto("FCW[<-? -A{1L&_&6t~", 0.0);
      funcionario0.removerProduto("?=fr9eYl", 289.1474651369207);
      funcionario0.getNome();
      funcionario0.getNome();
      funcionario0.mostrarEstoque();
      funcionario0.getNome();
      funcionario0.mostrarEstoque();
      funcionario0.setNome("FCW[<-? -A{1L&_&6t~");
      funcionario0.getUserName();
      funcionario0.setUserName("U(K9tUjL[\n~GZKm");
      funcionario0.setNome("");
      funcionario0.setSenha("S");
      ProdutoUnitario produtoUnitario0 = new ProdutoUnitario("y6Rwj!232){yQn'5", "_32~_a2LfG?", (-709.222305661));
      // Undeclared exception!
      try { 
        funcionario0.adicionarProduto(produtoUnitario0, 0.0);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }
}
