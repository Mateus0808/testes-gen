/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 15 17:18:31 GMT 2024
 */

package com.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.example.EstoqueDeProdutos;
import com.example.Produto;
import com.example.ProdutoQuilo;
import com.example.ProdutoUnitario;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EstoqueDeProdutos_ESTest extends EstoqueDeProdutos_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EstoqueDeProdutos estoqueDeProdutos0 = new EstoqueDeProdutos();
      String string0 = "120";
      Boolean boolean0 = Boolean.FALSE;
      EstoqueDeProdutos.produtoParaCompra("120", 0.0, boolean0);
      Map<String, List<Produto>> map0 = EstoqueDeProdutos.estoque;
      EstoqueDeProdutos.estoque = map0;
      EstoqueDeProdutos.mostrarEstoque(0);
      int int0 = 0;
      EstoqueDeProdutos.mostrarEstoque(0);
      // Undeclared exception!
      try { 
        EstoqueDeProdutos.exibirCopiaInicialDoEstoque();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EstoqueDeProdutos.precoPorCodigo("<u~");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo("c2'xte", "c2'xte", 0.0, 0.0);
      EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EstoqueDeProdutos.removerProduto("$1@MBiVd", 0.0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      EstoqueDeProdutos.estoque = null;
      // Undeclared exception!
      try { 
        EstoqueDeProdutos.produtoParaCompra("com.example.ProdutoQuilo", (-396.5839131), boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Boolean boolean0 = new Boolean("T)]#'!");
      EstoqueDeProdutos.produtoParaCompra((String) null, 0.0, boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EstoqueDeProdutos.Feed();
      EstoqueDeProdutos.Feed();
      EstoqueDeProdutos.exibirEstoqueCliente();
      EstoqueDeProdutos.copiarEstoque();
      EstoqueDeProdutos.exibirCopiaInicialDoEstoque();
      EstoqueDeProdutos.exibirCopiaInicialDoEstoque();
      EstoqueDeProdutos.exibirCopiaInicialDoEstoque();
      // Undeclared exception!
      EstoqueDeProdutos.mostrarEstoque(0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        EstoqueDeProdutos.adicionarProduto((Produto) null, 1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.example.EstoqueDeProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ProdutoUnitario produtoUnitario0 = new ProdutoUnitario("i<GW6d", "i<GW6d", (-1843.2074277173));
      EstoqueDeProdutos.adicionarProduto(produtoUnitario0, (-3434.543380187));
      assertEquals("i<GW6d", produtoUnitario0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario((Produto) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.example.EstoqueDeProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        EstoqueDeProdutos.mostrarEstoque(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("-S'IqZ^U>Dn");
      Boolean.logicalXor(false, false);
      Boolean.logicalAnd(false, false);
      EstoqueDeProdutos.produtoParaCompra("Quilos: ", (-436.3834529475114), boolean0);
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo("", "F=roQ0", (-436.3834529475114), (-555.245538068));
      produtoQuilo0.setValor(1994.0);
      EstoqueDeProdutos.adicionarProduto(produtoQuilo0, (-436.3834529475114));
      EstoqueDeProdutos.seekProduto("kg\n");
      EstoqueDeProdutos.produtoParaCompra("", 1556.54320201006, boolean0);
      Boolean boolean1 = Boolean.TRUE;
      Boolean.logicalAnd(false, false);
      EstoqueDeProdutos.produtoParaCompra("com.example.ProdutoQuilo", (-2034.1513285633469), boolean1);
      EstoqueDeProdutos.adicionarProduto(produtoQuilo0, (-555.245538068));
      EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo0);
      int int0 = 2225;
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ProdutoUnitario produtoUnitario0 = new ProdutoUnitario((String) null, "", 1.0);
      EstoqueDeProdutos.adicionarProduto(produtoUnitario0, 758.9);
      assertEquals(1.0, produtoUnitario0.getValor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ProdutoUnitario produtoUnitario0 = new ProdutoUnitario((String) null, "W.eu8(,", 1.0);
      EstoqueDeProdutos.adicionarProduto(produtoUnitario0, 758.9);
      assertNull(produtoUnitario0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = EstoqueDeProdutos.produtoParaCompra("80", (-1210.3387879913028), (Boolean) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Produto produto0 = EstoqueDeProdutos.seekProduto("130");
      assertNull(produto0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Produto produto0 = EstoqueDeProdutos.seekProduto("");
      assertNull(produto0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo((String) null, (String) null, (-1694.12119897448), (-1694.12119897448));
      produtoQuilo0.setCodigo((String) null);
      EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo0);
      EstoqueDeProdutos.seekProduto((String) null);
      EstoqueDeProdutos.precoPorCodigo((String) null);
      EstoqueDeProdutos.seekProduto("*****************************************************************");
      EstoqueDeProdutos.removerProduto((String) null, (-1694.12119897448));
      double double0 = EstoqueDeProdutos.precoPorCodigo((String) null);
      assertEquals(0.0, double0, 0.01);
      
      ProdutoQuilo produtoQuilo1 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo0);
      assertEquals((-1694.12119897448), produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals((-1694.12119897448), produtoQuilo1.getValor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ProdutoUnitario produtoUnitario0 = new ProdutoUnitario("$1@MBiVd", "$1@MBiVd", 8.904354542022816);
      produtoUnitario0.setValor(8.904354542022816);
      produtoUnitario0.setValor((-1568.0));
      EstoqueDeProdutos.adicionarProduto(produtoUnitario0, 8.904354542022816);
      produtoUnitario0.setValor(0.0);
      produtoUnitario0.setCodigo("$1@MBiVd");
      produtoUnitario0.setNome((String) null);
      EstoqueDeProdutos.removerProduto("$1@MBiVd", 8.904354542022816);
      EstoqueDeProdutos.mostrarEstoque((-1273));
      // Undeclared exception!
      try { 
        EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoUnitario0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.example.ProdutoUnitario cannot be cast to com.example.ProdutoQuilo
         //
         verifyException("com.example.EstoqueDeProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EstoqueDeProdutos.mostrarEstoque(1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EstoqueDeProdutos.mostrarEstoque(1702);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EstoqueDeProdutos.removerProduto("80", 32.0);
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo("80", "80", (-1992.82667), 29.0);
      produtoQuilo0.setValor((-1992.82667));
      ProdutoQuilo produtoQuilo1 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo0);
      produtoQuilo1.setValor((-339.208));
      produtoQuilo1.setNome("80");
      produtoQuilo1.setValor((-339.208));
      produtoQuilo0.setQtdQuilos((-1992.82667));
      Produto produto0 = EstoqueDeProdutos.seekProduto("6ialXn");
      assertNull(produto0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EstoqueDeProdutos estoqueDeProdutos0 = new EstoqueDeProdutos();
      EstoqueDeProdutos.seekProduto("(!<");
      EstoqueDeProdutos.precoPorCodigo("<wCs-@G*<");
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo("c2'xte", "c2'xte", 0.0, 2195.8582163539);
      EstoqueDeProdutos.removerProduto("c2'xte", 1.337737258524812);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EstoqueDeProdutos.Feed();
      EstoqueDeProdutos.copiarEstoque();
      EstoqueDeProdutos.exibirCopiaInicialDoEstoque();
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalOr(false, true);
      EstoqueDeProdutos.produtoParaCompra(";$8BS!", (-1985.732034), boolean0);
      EstoqueDeProdutos.exibirCopiaInicialDoEstoque();
      EstoqueDeProdutos.removerProduto(";$8BS!", (-1985.732034));
      EstoqueDeProdutos.exibirCopiaInicialDoEstoque();
  }
}
