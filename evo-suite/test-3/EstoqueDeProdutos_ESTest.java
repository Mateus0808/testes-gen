/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 15 17:52:57 GMT 2024
 */

package com.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.example.EstoqueDeProdutos;
import com.example.Produto;
import com.example.ProdutoQuilo;
import com.example.ProdutoUnitario;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EstoqueDeProdutos_ESTest extends EstoqueDeProdutos_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo("", "", (-3276.120993300003), (-3276.120993300003));
      assertNotNull(produtoQuilo0);
      assertEquals((-3276.120993300003), produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals((-3276.120993300003), produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getNome());
      assertEquals("", produtoQuilo0.getCodigo());
      
      produtoQuilo0.setQtdQuilos(0.0);
      assertEquals((-3276.120993300003), produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getNome());
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      
      EstoqueDeProdutos.adicionarProduto(produtoQuilo0, (-3276.120993300003));
      assertEquals((-3276.120993300003), produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getNome());
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      
      ProdutoQuilo produtoQuilo1 = new ProdutoQuilo("", "", (-3276.120993300003), 0.0);
      assertNotNull(produtoQuilo1);
      assertEquals("", produtoQuilo1.getNome());
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals((-3276.120993300003), produtoQuilo1.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      produtoQuilo1.setValor(3256.0);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertEquals("", produtoQuilo1.getNome());
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals(3256.0, produtoQuilo1.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      produtoQuilo1.setQtdQuilos((-3276.120993300003));
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertEquals("", produtoQuilo1.getNome());
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals(3256.0, produtoQuilo1.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      produtoQuilo1.setNome("S4+`I>uPWOH[7fn");
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals(3256.0, produtoQuilo1.getValor(), 0.01);
      assertEquals("S4+`I>uPWOH[7fn", produtoQuilo1.getNome());
      assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      produtoQuilo1.setValor(0.0);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals("S4+`I>uPWOH[7fn", produtoQuilo1.getNome());
      assertEquals(0.0, produtoQuilo1.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      EstoqueDeProdutos.adicionarProduto(produtoQuilo1, (-3276.120993300003));
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals("S4+`I>uPWOH[7fn", produtoQuilo1.getNome());
      assertEquals(0.0, produtoQuilo1.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      EstoqueDeProdutos.Feed();
      produtoQuilo1.setQtdQuilos(0.0);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals("S4+`I>uPWOH[7fn", produtoQuilo1.getNome());
      assertEquals(0.0, produtoQuilo1.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      EstoqueDeProdutos.exibirEstoqueCliente();
      ProdutoQuilo produtoQuilo2 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo1);
      assertNotNull(produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertNotSame(produtoQuilo2, produtoQuilo1);
      assertNotSame(produtoQuilo2, produtoQuilo0);
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals("S4+`I>uPWOH[7fn", produtoQuilo1.getNome());
      assertEquals(0.0, produtoQuilo1.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals(0.0, produtoQuilo2.getQtdQuilos(), 0.01);
      assertEquals(0.0, produtoQuilo2.getValor(), 0.01);
      assertEquals("S4+`I>uPWOH[7fn", produtoQuilo2.getNome());
      assertEquals("", produtoQuilo2.getCodigo());
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo0));
      
      EstoqueDeProdutos.removerProduto("", (-3276.120993300003));
      produtoQuilo0.setCodigo("");
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertEquals((-3276.120993300003), produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getNome());
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      
      double double0 = EstoqueDeProdutos.precoPorCodigo("com.example.Produto");
      assertEquals(0.0, double0, 0.01);
      
      double double1 = EstoqueDeProdutos.precoPorCodigo("");
      assertEquals((-3276.120993300003), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      EstoqueDeProdutos.Feed();
      EstoqueDeProdutos.copiarEstoque();
      EstoqueDeProdutos.Feed();
      ProdutoQuilo produtoQuilo3 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo0);
      assertNotNull(produtoQuilo3);
      assertNotSame(produtoQuilo0, produtoQuilo3);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo3, produtoQuilo2);
      assertNotSame(produtoQuilo3, produtoQuilo0);
      assertNotSame(produtoQuilo3, produtoQuilo1);
      assertEquals((-3276.120993300003), produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getNome());
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(0.0, produtoQuilo3.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo3.getCodigo());
      assertEquals("", produtoQuilo3.getNome());
      assertEquals((-3276.120993300003), produtoQuilo3.getValor(), 0.01);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo1));
      
      double double2 = EstoqueDeProdutos.precoPorCodigo("");
      assertEquals((-3276.120993300003), double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      Produto produto0 = EstoqueDeProdutos.seekProduto((String) null);
      assertNull(produto0);
      
      EstoqueDeProdutos.copiarEstoque();
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = EstoqueDeProdutos.produtoParaCompra("51", 3256.0, boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Produto produto0 = EstoqueDeProdutos.seekProduto("");
      assertNull(produto0);
      
      EstoqueDeProdutos.copiarEstoque();
      double double0 = EstoqueDeProdutos.precoPorCodigo("");
      assertEquals(0.0, double0, 0.01);
      
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo("", "", 0.0, 0.0);
      assertNotNull(produtoQuilo0);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals("", produtoQuilo0.getNome());
      assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      
      Boolean boolean0 = Boolean.valueOf("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = EstoqueDeProdutos.produtoParaCompra("Aperte ENTER para continuar ...", 0.0, boolean0);
      assertFalse(boolean1);
      
      EstoqueDeProdutos.mostrarEstoque(0);
      EstoqueDeProdutos estoqueDeProdutos0 = new EstoqueDeProdutos();
      assertNotNull(estoqueDeProdutos0);
      
      Boolean boolean2 = new Boolean("E?yL:@qS7+g|RHd}V}n");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      
      boolean boolean3 = EstoqueDeProdutos.produtoParaCompra("", 0.0, boolean2);
      assertFalse(boolean3);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean3 == boolean1);
      
      EstoqueDeProdutos.adicionarProduto(produtoQuilo0, 0.0);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals("", produtoQuilo0.getNome());
      assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      
      String string0 = "";
      Boolean boolean4 = new Boolean(true);
      assertNotNull(boolean4);
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      
      boolean boolean5 = EstoqueDeProdutos.produtoParaCompra("", 50.0, boolean4);
      assertFalse(boolean5);
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      
      EstoqueDeProdutos.exibirCopiaInicialDoEstoque();
      EstoqueDeProdutos.mostrarEstoque(2);
      EstoqueDeProdutos.Feed();
      // Undeclared exception!
      try { 
        EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario((Produto) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.example.EstoqueDeProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo((String) null, "9Aq|\",V_t[VSgd{$C]", (-1078.5395749), (-1078.5395749));
      assertNotNull(produtoQuilo0);
      assertEquals("9Aq|\",V_t[VSgd{$C]", produtoQuilo0.getNome());
      assertNull(produtoQuilo0.getCodigo());
      assertEquals((-1078.5395749), produtoQuilo0.getValor(), 0.01);
      assertEquals((-1078.5395749), produtoQuilo0.getQtdQuilos(), 0.01);
      
      produtoQuilo0.setValor((-1078.5395749));
      assertEquals("9Aq|\",V_t[VSgd{$C]", produtoQuilo0.getNome());
      assertNull(produtoQuilo0.getCodigo());
      assertEquals((-1078.5395749), produtoQuilo0.getValor(), 0.01);
      assertEquals((-1078.5395749), produtoQuilo0.getQtdQuilos(), 0.01);
      
      produtoQuilo0.setQtdQuilos(75.0);
      assertEquals("9Aq|\",V_t[VSgd{$C]", produtoQuilo0.getNome());
      assertNull(produtoQuilo0.getCodigo());
      assertEquals((-1078.5395749), produtoQuilo0.getValor(), 0.01);
      assertEquals(75.0, produtoQuilo0.getQtdQuilos(), 0.01);
      
      produtoQuilo0.setNome("$|5;DKNgu`znJ!CR");
      assertNull(produtoQuilo0.getCodigo());
      assertEquals((-1078.5395749), produtoQuilo0.getValor(), 0.01);
      assertEquals(75.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("$|5;DKNgu`znJ!CR", produtoQuilo0.getNome());
      
      produtoQuilo0.setCodigo("");
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals((-1078.5395749), produtoQuilo0.getValor(), 0.01);
      assertEquals(75.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("$|5;DKNgu`znJ!CR", produtoQuilo0.getNome());
      
      produtoQuilo0.setQtdQuilos(4360.6);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals((-1078.5395749), produtoQuilo0.getValor(), 0.01);
      assertEquals(4360.6, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("$|5;DKNgu`znJ!CR", produtoQuilo0.getNome());
      
      produtoQuilo0.setQtdQuilos(1.0);
      assertEquals(1.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals((-1078.5395749), produtoQuilo0.getValor(), 0.01);
      assertEquals("$|5;DKNgu`znJ!CR", produtoQuilo0.getNome());
      
      ProdutoQuilo produtoQuilo1 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo0);
      assertNotNull(produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertEquals(1.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals((-1078.5395749), produtoQuilo0.getValor(), 0.01);
      assertEquals("$|5;DKNgu`znJ!CR", produtoQuilo0.getNome());
      assertEquals("$|5;DKNgu`znJ!CR", produtoQuilo1.getNome());
      assertEquals(1.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals((-1078.5395749), produtoQuilo1.getValor(), 0.01);
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      EstoqueDeProdutos.mostrarEstoque((-1369));
      EstoqueDeProdutos.Feed();
      EstoqueDeProdutos.copiarEstoque();
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = Boolean.logicalAnd(false, false);
      assertFalse(boolean1);
      
      boolean boolean2 = EstoqueDeProdutos.produtoParaCompra("[5~P5;8SFw9hVeEpF", (-1078.5395749), boolean0);
      assertFalse(boolean2);
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean2 == boolean1);
      
      EstoqueDeProdutos.mostrarEstoque((-1369));
      Boolean boolean3 = Boolean.valueOf("150");
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      
      boolean boolean4 = Boolean.logicalXor(false, true);
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      
      boolean boolean5 = EstoqueDeProdutos.produtoParaCompra("150", (-2668.05103), boolean3);
      assertTrue(boolean5);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean4));
      
      double double0 = EstoqueDeProdutos.precoPorCodigo("");
      assertEquals(0.0, double0, 0.01);
      
      EstoqueDeProdutos.Feed();
      EstoqueDeProdutos.exibirCopiaInicialDoEstoque();
      EstoqueDeProdutos.copiarEstoque();
      EstoqueDeProdutos.exibirEstoqueCliente();
      EstoqueDeProdutos.mostrarEstoque(2078209981);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo("", "", (-3276.120993300003), (-3276.120993300003));
      assertNotNull(produtoQuilo0);
      assertEquals((-3276.120993300003), produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getNome());
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals((-3276.120993300003), produtoQuilo0.getQtdQuilos(), 0.01);
      
      produtoQuilo0.setQtdQuilos(0.0);
      assertEquals((-3276.120993300003), produtoQuilo0.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo0.getNome());
      assertEquals("", produtoQuilo0.getCodigo());
      
      EstoqueDeProdutos.adicionarProduto(produtoQuilo0, (-3276.120993300003));
      assertEquals((-3276.120993300003), produtoQuilo0.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo0.getNome());
      assertEquals("", produtoQuilo0.getCodigo());
      
      produtoQuilo0.setValor(3256.0);
      assertEquals(3256.0, produtoQuilo0.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo0.getNome());
      assertEquals("", produtoQuilo0.getCodigo());
      
      produtoQuilo0.setQtdQuilos((-3276.120993300003));
      assertEquals(3256.0, produtoQuilo0.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo0.getNome());
      assertEquals("", produtoQuilo0.getCodigo());
      
      produtoQuilo0.setNome("S4+`I>uPWOH[7fn");
      assertEquals(3256.0, produtoQuilo0.getValor(), 0.01);
      assertEquals("S4+`I>uPWOH[7fn", produtoQuilo0.getNome());
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo0.getCodigo());
      
      produtoQuilo0.setValor(0.0);
      assertEquals("S4+`I>uPWOH[7fn", produtoQuilo0.getNome());
      assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo0.getCodigo());
      
      EstoqueDeProdutos.adicionarProduto(produtoQuilo0, (-3276.120993300003));
      assertEquals("S4+`I>uPWOH[7fn", produtoQuilo0.getNome());
      assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo0.getCodigo());
      
      produtoQuilo0.setQtdQuilos((-3000.7613684532994));
      assertEquals("S4+`I>uPWOH[7fn", produtoQuilo0.getNome());
      assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo0.getCodigo());
      
      EstoqueDeProdutos.Feed();
      produtoQuilo0.setQtdQuilos(0.0);
      assertEquals("S4+`I>uPWOH[7fn", produtoQuilo0.getNome());
      assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo0.getCodigo());
      
      EstoqueDeProdutos.exibirEstoqueCliente();
      ProdutoQuilo produtoQuilo1 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo0);
      assertNotNull(produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertEquals("S4+`I>uPWOH[7fn", produtoQuilo0.getNome());
      assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals("S4+`I>uPWOH[7fn", produtoQuilo1.getNome());
      assertEquals(0.0, produtoQuilo1.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      EstoqueDeProdutos.removerProduto("", (-3276.120993300003));
      produtoQuilo0.setCodigo("");
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertEquals("S4+`I>uPWOH[7fn", produtoQuilo0.getNome());
      assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo0.getCodigo());
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      
      double double0 = EstoqueDeProdutos.precoPorCodigo("com.example.Produto");
      assertEquals(0.0, double0, 0.01);
      
      double double1 = EstoqueDeProdutos.precoPorCodigo("");
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      EstoqueDeProdutos.Feed();
      EstoqueDeProdutos.copiarEstoque();
      EstoqueDeProdutos.Feed();
      ProdutoQuilo produtoQuilo2 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo0);
      assertNotNull(produtoQuilo2);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo2, produtoQuilo1);
      assertNotSame(produtoQuilo2, produtoQuilo0);
      assertEquals("S4+`I>uPWOH[7fn", produtoQuilo0.getNome());
      assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals(0.0, produtoQuilo2.getQtdQuilos(), 0.01);
      assertEquals(0.0, produtoQuilo2.getValor(), 0.01);
      assertEquals("S4+`I>uPWOH[7fn", produtoQuilo2.getNome());
      assertEquals("", produtoQuilo2.getCodigo());
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo0));
      
      double double2 = EstoqueDeProdutos.precoPorCodigo("");
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      ProdutoQuilo produtoQuilo3 = (ProdutoQuilo)EstoqueDeProdutos.seekProduto("");
      assertNotNull(produtoQuilo3);
      assertNotSame(produtoQuilo3, produtoQuilo1);
      assertNotSame(produtoQuilo3, produtoQuilo2);
      assertNotSame(produtoQuilo3, produtoQuilo0);
      assertEquals("", produtoQuilo3.getCodigo());
      assertEquals("S4+`I>uPWOH[7fn", produtoQuilo3.getNome());
      assertEquals(3276.120993300003, produtoQuilo3.getQtdQuilos(), 0.01);
      assertEquals(0.0, produtoQuilo3.getValor(), 0.01);
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo0));
      
      EstoqueDeProdutos.copiarEstoque();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo("", "", (-3276.120993300003), (-3276.120993300003));
      assertNotNull(produtoQuilo0);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals("", produtoQuilo0.getNome());
      assertEquals((-3276.120993300003), produtoQuilo0.getValor(), 0.01);
      assertEquals((-3276.120993300003), produtoQuilo0.getQtdQuilos(), 0.01);
      
      produtoQuilo0.setQtdQuilos(0.0);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals("", produtoQuilo0.getNome());
      assertEquals((-3276.120993300003), produtoQuilo0.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      
      EstoqueDeProdutos.adicionarProduto(produtoQuilo0, (-3276.120993300003));
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals("", produtoQuilo0.getNome());
      assertEquals((-3276.120993300003), produtoQuilo0.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      
      ProdutoQuilo produtoQuilo1 = new ProdutoQuilo("", "", (-3276.120993300003), 0.0);
      assertNotNull(produtoQuilo1);
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals("", produtoQuilo1.getNome());
      assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals((-3276.120993300003), produtoQuilo1.getValor(), 0.01);
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      produtoQuilo1.setValor(3256.0);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertEquals(3256.0, produtoQuilo1.getValor(), 0.01);
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals("", produtoQuilo1.getNome());
      assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      produtoQuilo1.setQtdQuilos((-3276.120993300003));
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertEquals(3256.0, produtoQuilo1.getValor(), 0.01);
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals("", produtoQuilo1.getNome());
      assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      produtoQuilo1.setNome("S4+`I>uPWOH[7fn");
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertEquals(3256.0, produtoQuilo1.getValor(), 0.01);
      assertEquals("S4+`I>uPWOH[7fn", produtoQuilo1.getNome());
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      produtoQuilo1.setValor(0.0);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertEquals("S4+`I>uPWOH[7fn", produtoQuilo1.getNome());
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals(0.0, produtoQuilo1.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      EstoqueDeProdutos.adicionarProduto(produtoQuilo1, (-3276.120993300003));
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertEquals("S4+`I>uPWOH[7fn", produtoQuilo1.getNome());
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals(0.0, produtoQuilo1.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      EstoqueDeProdutos.Feed();
      produtoQuilo1.setQtdQuilos(0.0);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertEquals("S4+`I>uPWOH[7fn", produtoQuilo1.getNome());
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals(0.0, produtoQuilo1.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      EstoqueDeProdutos.exibirEstoqueCliente();
      ProdutoQuilo produtoQuilo2 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo1);
      assertNotNull(produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertNotSame(produtoQuilo2, produtoQuilo0);
      assertNotSame(produtoQuilo2, produtoQuilo1);
      assertEquals("S4+`I>uPWOH[7fn", produtoQuilo1.getNome());
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals(0.0, produtoQuilo1.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals("S4+`I>uPWOH[7fn", produtoQuilo2.getNome());
      assertEquals("", produtoQuilo2.getCodigo());
      assertEquals(0.0, produtoQuilo2.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo2.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo1));
      
      EstoqueDeProdutos.removerProduto("", (-3276.120993300003));
      produtoQuilo0.setCodigo("");
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals("", produtoQuilo0.getNome());
      assertEquals((-3276.120993300003), produtoQuilo0.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      
      double double0 = EstoqueDeProdutos.precoPorCodigo("com.example.Produto");
      assertEquals(0.0, double0, 0.01);
      
      double double1 = EstoqueDeProdutos.precoPorCodigo("");
      assertEquals((-3276.120993300003), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      EstoqueDeProdutos.Feed();
      EstoqueDeProdutos.copiarEstoque();
      EstoqueDeProdutos.Feed();
      ProdutoQuilo produtoQuilo3 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo0);
      assertNotNull(produtoQuilo3);
      assertNotSame(produtoQuilo0, produtoQuilo3);
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertNotSame(produtoQuilo3, produtoQuilo0);
      assertNotSame(produtoQuilo3, produtoQuilo2);
      assertNotSame(produtoQuilo3, produtoQuilo1);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals("", produtoQuilo0.getNome());
      assertEquals((-3276.120993300003), produtoQuilo0.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(0.0, produtoQuilo3.getQtdQuilos(), 0.01);
      assertEquals((-3276.120993300003), produtoQuilo3.getValor(), 0.01);
      assertEquals("", produtoQuilo3.getNome());
      assertEquals("", produtoQuilo3.getCodigo());
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo1));
      
      double double2 = EstoqueDeProdutos.precoPorCodigo("");
      assertEquals((-3276.120993300003), double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      Produto produto0 = EstoqueDeProdutos.seekProduto((String) null);
      assertNull(produto0);
      
      EstoqueDeProdutos.copiarEstoque();
      EstoqueDeProdutos.removerProduto("140", 0.0);
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = EstoqueDeProdutos.produtoParaCompra("S4+`I>uPWOH[7fn", 0.0, boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "31";
      double double0 = 20.0;
      ProdutoUnitario produtoUnitario0 = new ProdutoUnitario("31", "b'UKiMz", 20.0);
      assertNotNull(produtoUnitario0);
      assertEquals("31", produtoUnitario0.getCodigo());
      assertEquals("b'UKiMz", produtoUnitario0.getNome());
      assertEquals(20.0, produtoUnitario0.getValor(), 0.01);
      
      produtoUnitario0.setNome("31");
      assertEquals("31", produtoUnitario0.getNome());
      assertEquals("31", produtoUnitario0.getCodigo());
      assertEquals(20.0, produtoUnitario0.getValor(), 0.01);
      
      EstoqueDeProdutos.adicionarProduto(produtoUnitario0, 20.0);
      assertEquals("31", produtoUnitario0.getNome());
      assertEquals("31", produtoUnitario0.getCodigo());
      assertEquals(20.0, produtoUnitario0.getValor(), 0.01);
      
      double double1 = 44.0;
      produtoUnitario0.setValor(44.0);
      assertEquals("31", produtoUnitario0.getNome());
      assertEquals("31", produtoUnitario0.getCodigo());
      assertEquals(44.0, produtoUnitario0.getValor(), 0.01);
      
      produtoUnitario0.setValor(18.0);
      assertEquals("31", produtoUnitario0.getNome());
      assertEquals("31", produtoUnitario0.getCodigo());
      assertEquals(18.0, produtoUnitario0.getValor(), 0.01);
      
      produtoUnitario0.setNome("l");
      assertEquals("31", produtoUnitario0.getCodigo());
      assertEquals("l", produtoUnitario0.getNome());
      assertEquals(18.0, produtoUnitario0.getValor(), 0.01);
      
      EstoqueDeProdutos.adicionarProduto(produtoUnitario0, 20.0);
      assertEquals("31", produtoUnitario0.getCodigo());
      assertEquals("l", produtoUnitario0.getNome());
      assertEquals(18.0, produtoUnitario0.getValor(), 0.01);
      
      // Undeclared exception!
      try { 
        EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoUnitario0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.example.ProdutoUnitario cannot be cast to com.example.ProdutoQuilo
         //
         verifyException("com.example.EstoqueDeProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "8+l1Y-";
      Boolean boolean0 = Boolean.valueOf("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = Boolean.logicalOr(false, false);
      assertFalse(boolean1);
      
      boolean boolean2 = Boolean.logicalAnd(false, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = Boolean.getBoolean("");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      boolean boolean4 = Boolean.logicalAnd(false, false);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      
      int int0 = Boolean.compare(false, false);
      assertEquals(0, int0);
      
      boolean boolean5 = Boolean.getBoolean("");
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      
      boolean boolean6 = Boolean.logicalAnd(false, false);
      assertFalse(boolean6);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      
      boolean boolean7 = Boolean.logicalOr(true, true);
      assertTrue(boolean7);
      assertFalse(boolean7 == boolean2);
      assertFalse(boolean7 == boolean6);
      assertFalse(boolean7 == boolean3);
      assertFalse(boolean7 == boolean4);
      assertFalse(boolean7 == boolean5);
      assertFalse(boolean7 == boolean1);
      
      boolean boolean8 = EstoqueDeProdutos.produtoParaCompra("8+l1Y-", 0.0, boolean0);
      assertFalse(boolean8);
      assertTrue(boolean0.equals((Object)boolean2));
      assertFalse(boolean0.equals((Object)boolean7));
      assertTrue(boolean0.equals((Object)boolean4));
      assertTrue(boolean0.equals((Object)boolean3));
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean5));
      assertTrue(boolean0.equals((Object)boolean6));
      assertTrue(boolean8 == boolean2);
      assertFalse(boolean8 == boolean7);
      assertTrue(boolean8 == boolean6);
      assertTrue(boolean8 == boolean1);
      assertTrue(boolean8 == boolean5);
      assertTrue(boolean8 == boolean4);
      assertTrue(boolean8 == boolean3);
      
      EstoqueDeProdutos.mostrarEstoque((-3159));
      EstoqueDeProdutos.Feed();
      EstoqueDeProdutos.Feed();
      double double0 = EstoqueDeProdutos.precoPorCodigo(">Arl2aKG$!");
      assertEquals(0.0, double0, 0.01);
      
      EstoqueDeProdutos estoqueDeProdutos0 = new EstoqueDeProdutos();
      assertNotNull(estoqueDeProdutos0);
      
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo("", ">Arl2aKG$!", 0.0, (-57.912557490403984));
      assertNotNull(produtoQuilo0);
      assertEquals(">Arl2aKG$!", produtoQuilo0.getNome());
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      assertEquals((-57.912557490403984), produtoQuilo0.getQtdQuilos(), 0.01);
      
      ProdutoQuilo produtoQuilo1 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo0);
      assertNotNull(produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertEquals(">Arl2aKG$!", produtoQuilo0.getNome());
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      assertEquals((-57.912557490403984), produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(">Arl2aKG$!", produtoQuilo1.getNome());
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals(0.0, produtoQuilo1.getValor(), 0.01);
      assertEquals((-57.912557490403984), produtoQuilo1.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      EstoqueDeProdutos.exibirEstoqueCliente();
      int int1 = 973;
      EstoqueDeProdutos.mostrarEstoque(973);
      // Undeclared exception!
      try { 
        EstoqueDeProdutos.exibirCopiaInicialDoEstoque();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EstoqueDeProdutos.removerProduto("*  ATEN\u00C7\u00C3O! Produto com o c\u00F3digo ", 1.0);
      EstoqueDeProdutos estoqueDeProdutos0 = new EstoqueDeProdutos();
      assertNotNull(estoqueDeProdutos0);
      
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo("f`a{PKrY77", "aSU~4lm", 0.0, 1.0);
      assertNotNull(produtoQuilo0);
      assertEquals("f`a{PKrY77", produtoQuilo0.getCodigo());
      assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      assertEquals(1.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("aSU~4lm", produtoQuilo0.getNome());
      
      ProdutoQuilo produtoQuilo1 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo0);
      assertNotNull(produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertEquals("f`a{PKrY77", produtoQuilo0.getCodigo());
      assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      assertEquals(1.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("aSU~4lm", produtoQuilo0.getNome());
      assertEquals(0.0, produtoQuilo1.getValor(), 0.01);
      assertEquals(1.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals("f`a{PKrY77", produtoQuilo1.getCodigo());
      assertEquals("aSU~4lm", produtoQuilo1.getNome());
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      ProdutoUnitario produtoUnitario0 = new ProdutoUnitario("*  ATEN\u00C7\u00C3O! Produto com o c\u00F3digo ", "b -#Gqp4TY0Sim^", 1975.43);
      assertNotNull(produtoUnitario0);
      assertEquals("b -#Gqp4TY0Sim^", produtoUnitario0.getNome());
      assertEquals(1975.43, produtoUnitario0.getValor(), 0.01);
      assertEquals("*  ATEN\u00C7\u00C3O! Produto com o c\u00F3digo ", produtoUnitario0.getCodigo());
      
      produtoUnitario0.setNome("Lim\u00E3o");
      assertEquals(1975.43, produtoUnitario0.getValor(), 0.01);
      assertEquals("Lim\u00E3o", produtoUnitario0.getNome());
      assertEquals("*  ATEN\u00C7\u00C3O! Produto com o c\u00F3digo ", produtoUnitario0.getCodigo());
      
      produtoUnitario0.setNome("*  ATEN\u00C7\u00C3O! Produto com o c\u00F3digo ");
      assertEquals(1975.43, produtoUnitario0.getValor(), 0.01);
      assertEquals("*  ATEN\u00C7\u00C3O! Produto com o c\u00F3digo ", produtoUnitario0.getNome());
      assertEquals("*  ATEN\u00C7\u00C3O! Produto com o c\u00F3digo ", produtoUnitario0.getCodigo());
      
      EstoqueDeProdutos.adicionarProduto(produtoUnitario0, 0.0);
      assertEquals(1975.43, produtoUnitario0.getValor(), 0.01);
      assertEquals("*  ATEN\u00C7\u00C3O! Produto com o c\u00F3digo ", produtoUnitario0.getNome());
      assertEquals("*  ATEN\u00C7\u00C3O! Produto com o c\u00F3digo ", produtoUnitario0.getCodigo());
      
      EstoqueDeProdutos.copiarEstoque();
      EstoqueDeProdutos.Feed();
      EstoqueDeProdutos.exibirEstoqueCliente();
      EstoqueDeProdutos.exibirCopiaInicialDoEstoque();
      double double0 = EstoqueDeProdutos.precoPorCodigo("u");
      assertEquals(0.0, double0, 0.01);
      
      EstoqueDeProdutos.exibirCopiaInicialDoEstoque();
      EstoqueDeProdutos.mostrarEstoque((-1914));
      EstoqueDeProdutos.removerProduto("31", 1975.43);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EstoqueDeProdutos.exibirEstoqueCliente();
      EstoqueDeProdutos.mostrarEstoque(0);
      double double0 = EstoqueDeProdutos.precoPorCodigo("");
      assertEquals(0.0, double0, 0.01);
      
      String string0 = "t[";
      ProdutoUnitario produtoUnitario0 = new ProdutoUnitario("tf%axg~fbf$W0[", "t[", 0.0);
      assertNotNull(produtoUnitario0);
      assertEquals(0.0, produtoUnitario0.getValor(), 0.01);
      assertEquals("tf%axg~fbf$W0[", produtoUnitario0.getCodigo());
      assertEquals("t[", produtoUnitario0.getNome());
      
      String string1 = "`tQ_";
      produtoUnitario0.setNome("`tQ_");
      assertEquals(0.0, produtoUnitario0.getValor(), 0.01);
      assertEquals("tf%axg~fbf$W0[", produtoUnitario0.getCodigo());
      assertEquals("`tQ_", produtoUnitario0.getNome());
      
      produtoUnitario0.setNome("tf%axg~fbf$W0[");
      assertEquals(0.0, produtoUnitario0.getValor(), 0.01);
      assertEquals("tf%axg~fbf$W0[", produtoUnitario0.getCodigo());
      assertEquals("tf%axg~fbf$W0[", produtoUnitario0.getNome());
      
      produtoUnitario0.setNome("^}FtOb_>{o|");
      assertEquals(0.0, produtoUnitario0.getValor(), 0.01);
      assertEquals("tf%axg~fbf$W0[", produtoUnitario0.getCodigo());
      assertEquals("^}FtOb_>{o|", produtoUnitario0.getNome());
      
      produtoUnitario0.setValor(1610.60188519);
      assertEquals("tf%axg~fbf$W0[", produtoUnitario0.getCodigo());
      assertEquals(1610.60188519, produtoUnitario0.getValor(), 0.01);
      assertEquals("^}FtOb_>{o|", produtoUnitario0.getNome());
      
      produtoUnitario0.setValor(1610.60188519);
      assertEquals("tf%axg~fbf$W0[", produtoUnitario0.getCodigo());
      assertEquals(1610.60188519, produtoUnitario0.getValor(), 0.01);
      assertEquals("^}FtOb_>{o|", produtoUnitario0.getNome());
      
      produtoUnitario0.setCodigo("t[");
      assertEquals("t[", produtoUnitario0.getCodigo());
      assertEquals(1610.60188519, produtoUnitario0.getValor(), 0.01);
      assertEquals("^}FtOb_>{o|", produtoUnitario0.getNome());
      
      produtoUnitario0.setNome("tf%axg~fbf$W0[");
      assertEquals("t[", produtoUnitario0.getCodigo());
      assertEquals(1610.60188519, produtoUnitario0.getValor(), 0.01);
      assertEquals("tf%axg~fbf$W0[", produtoUnitario0.getNome());
      
      EstoqueDeProdutos.adicionarProduto(produtoUnitario0, 0);
      assertEquals("t[", produtoUnitario0.getCodigo());
      assertEquals(1610.60188519, produtoUnitario0.getValor(), 0.01);
      assertEquals("tf%axg~fbf$W0[", produtoUnitario0.getNome());
      
      EstoqueDeProdutos.Feed();
      // Undeclared exception!
      try { 
        EstoqueDeProdutos.adicionarProduto(produtoUnitario0, 1610.60188519);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EstoqueDeProdutos estoqueDeProdutos0 = new EstoqueDeProdutos();
      assertNotNull(estoqueDeProdutos0);
      
      EstoqueDeProdutos.copiarEstoque();
      EstoqueDeProdutos.removerProduto("5w-&:W%&D%4(7NZi", (-1988.52422518));
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo("", "", (-243.99445572), 0.0);
      assertNotNull(produtoQuilo0);
      assertEquals("", produtoQuilo0.getNome());
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals((-243.99445572), produtoQuilo0.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      
      ProdutoQuilo produtoQuilo1 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo0);
      assertNotNull(produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertEquals("", produtoQuilo0.getNome());
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals((-243.99445572), produtoQuilo0.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo1.getNome());
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals((-243.99445572), produtoQuilo1.getValor(), 0.01);
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      produtoQuilo0.setQtdQuilos(1097.7056);
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertEquals(1097.7056, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo0.getNome());
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals((-243.99445572), produtoQuilo0.getValor(), 0.01);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      
      produtoQuilo0.setNome("com.example.Produto");
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertEquals(1097.7056, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("com.example.Produto", produtoQuilo0.getNome());
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals((-243.99445572), produtoQuilo0.getValor(), 0.01);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      
      produtoQuilo0.setValor(1097.7056);
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertEquals(1097.7056, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(1097.7056, produtoQuilo0.getValor(), 0.01);
      assertEquals("com.example.Produto", produtoQuilo0.getNome());
      assertEquals("", produtoQuilo0.getCodigo());
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      
      produtoQuilo1.setNome("63)&dUQM7F");
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertEquals(1097.7056, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(1097.7056, produtoQuilo0.getValor(), 0.01);
      assertEquals("com.example.Produto", produtoQuilo0.getNome());
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals("63)&dUQM7F", produtoQuilo1.getNome());
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals((-243.99445572), produtoQuilo1.getValor(), 0.01);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      EstoqueDeProdutos.adicionarProduto(produtoQuilo1, 0.0);
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertEquals(1097.7056, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(1097.7056, produtoQuilo0.getValor(), 0.01);
      assertEquals("com.example.Produto", produtoQuilo0.getNome());
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals("63)&dUQM7F", produtoQuilo1.getNome());
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals((-243.99445572), produtoQuilo1.getValor(), 0.01);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      EstoqueDeProdutos.removerProduto("", 0.0);
      ProdutoQuilo produtoQuilo2 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo1);
      assertNotNull(produtoQuilo2);
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertNotSame(produtoQuilo2, produtoQuilo1);
      assertNotSame(produtoQuilo2, produtoQuilo0);
      assertEquals(1097.7056, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(1097.7056, produtoQuilo0.getValor(), 0.01);
      assertEquals("com.example.Produto", produtoQuilo0.getNome());
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals("63)&dUQM7F", produtoQuilo1.getNome());
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals((-243.99445572), produtoQuilo1.getValor(), 0.01);
      assertEquals("", produtoQuilo2.getCodigo());
      assertEquals(0.0, produtoQuilo2.getQtdQuilos(), 0.01);
      assertEquals("63)&dUQM7F", produtoQuilo2.getNome());
      assertEquals((-243.99445572), produtoQuilo2.getValor(), 0.01);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo0));
      
      produtoQuilo0.setCodigo("qLxk^DFF");
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertEquals(1097.7056, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(1097.7056, produtoQuilo0.getValor(), 0.01);
      assertEquals("com.example.Produto", produtoQuilo0.getNome());
      assertEquals("qLxk^DFF", produtoQuilo0.getCodigo());
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      
      produtoQuilo1.setNome("com.example.Produto");
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertEquals(1097.7056, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(1097.7056, produtoQuilo0.getValor(), 0.01);
      assertEquals("com.example.Produto", produtoQuilo0.getNome());
      assertEquals("qLxk^DFF", produtoQuilo0.getCodigo());
      assertEquals("com.example.Produto", produtoQuilo1.getNome());
      assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals((-243.99445572), produtoQuilo1.getValor(), 0.01);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      EstoqueDeProdutos.Feed();
      ProdutoQuilo produtoQuilo3 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo2);
      assertNotNull(produtoQuilo3);
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo3);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertNotSame(produtoQuilo1, produtoQuilo3);
      assertNotSame(produtoQuilo2, produtoQuilo1);
      assertNotSame(produtoQuilo2, produtoQuilo3);
      assertNotSame(produtoQuilo2, produtoQuilo0);
      assertNotSame(produtoQuilo3, produtoQuilo0);
      assertNotSame(produtoQuilo3, produtoQuilo1);
      assertNotSame(produtoQuilo3, produtoQuilo2);
      assertEquals(1097.7056, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(1097.7056, produtoQuilo0.getValor(), 0.01);
      assertEquals("com.example.Produto", produtoQuilo0.getNome());
      assertEquals("qLxk^DFF", produtoQuilo0.getCodigo());
      assertEquals("com.example.Produto", produtoQuilo1.getNome());
      assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals((-243.99445572), produtoQuilo1.getValor(), 0.01);
      assertEquals("", produtoQuilo2.getCodigo());
      assertEquals(0.0, produtoQuilo2.getQtdQuilos(), 0.01);
      assertEquals("63)&dUQM7F", produtoQuilo2.getNome());
      assertEquals((-243.99445572), produtoQuilo2.getValor(), 0.01);
      assertEquals("63)&dUQM7F", produtoQuilo3.getNome());
      assertEquals("", produtoQuilo3.getCodigo());
      assertEquals((-243.99445572), produtoQuilo3.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo3.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo2));
      
      ProdutoQuilo produtoQuilo4 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo3);
      assertNotNull(produtoQuilo4);
      assertNotSame(produtoQuilo4, produtoQuilo0);
      assertNotSame(produtoQuilo4, produtoQuilo1);
      assertNotSame(produtoQuilo4, produtoQuilo3);
      assertNotSame(produtoQuilo4, produtoQuilo2);
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo4);
      assertNotSame(produtoQuilo0, produtoQuilo3);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo4);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertNotSame(produtoQuilo1, produtoQuilo3);
      assertNotSame(produtoQuilo2, produtoQuilo1);
      assertNotSame(produtoQuilo2, produtoQuilo4);
      assertNotSame(produtoQuilo2, produtoQuilo3);
      assertNotSame(produtoQuilo2, produtoQuilo0);
      assertNotSame(produtoQuilo3, produtoQuilo0);
      assertNotSame(produtoQuilo3, produtoQuilo1);
      assertNotSame(produtoQuilo3, produtoQuilo4);
      assertNotSame(produtoQuilo3, produtoQuilo2);
      assertEquals("63)&dUQM7F", produtoQuilo4.getNome());
      assertEquals((-243.99445572), produtoQuilo4.getValor(), 0.01);
      assertEquals("", produtoQuilo4.getCodigo());
      assertEquals(0.0, produtoQuilo4.getQtdQuilos(), 0.01);
      assertEquals(1097.7056, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(1097.7056, produtoQuilo0.getValor(), 0.01);
      assertEquals("com.example.Produto", produtoQuilo0.getNome());
      assertEquals("qLxk^DFF", produtoQuilo0.getCodigo());
      assertEquals("com.example.Produto", produtoQuilo1.getNome());
      assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals((-243.99445572), produtoQuilo1.getValor(), 0.01);
      assertEquals("", produtoQuilo2.getCodigo());
      assertEquals(0.0, produtoQuilo2.getQtdQuilos(), 0.01);
      assertEquals("63)&dUQM7F", produtoQuilo2.getNome());
      assertEquals((-243.99445572), produtoQuilo2.getValor(), 0.01);
      assertEquals("63)&dUQM7F", produtoQuilo3.getNome());
      assertEquals("", produtoQuilo3.getCodigo());
      assertEquals((-243.99445572), produtoQuilo3.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo3.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo4.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo4.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo4.equals((Object)produtoQuilo3));
      assertFalse(produtoQuilo4.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo3));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo3));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo3));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo2));
      
      EstoqueDeProdutos.Feed();
      produtoQuilo3.setNome("");
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo4);
      assertNotSame(produtoQuilo0, produtoQuilo3);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo4);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertNotSame(produtoQuilo1, produtoQuilo3);
      assertNotSame(produtoQuilo2, produtoQuilo1);
      assertNotSame(produtoQuilo2, produtoQuilo4);
      assertNotSame(produtoQuilo2, produtoQuilo3);
      assertNotSame(produtoQuilo2, produtoQuilo0);
      assertNotSame(produtoQuilo3, produtoQuilo0);
      assertNotSame(produtoQuilo3, produtoQuilo1);
      assertNotSame(produtoQuilo3, produtoQuilo4);
      assertNotSame(produtoQuilo3, produtoQuilo2);
      assertEquals(1097.7056, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(1097.7056, produtoQuilo0.getValor(), 0.01);
      assertEquals("com.example.Produto", produtoQuilo0.getNome());
      assertEquals("qLxk^DFF", produtoQuilo0.getCodigo());
      assertEquals("com.example.Produto", produtoQuilo1.getNome());
      assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals((-243.99445572), produtoQuilo1.getValor(), 0.01);
      assertEquals("", produtoQuilo2.getCodigo());
      assertEquals(0.0, produtoQuilo2.getQtdQuilos(), 0.01);
      assertEquals("63)&dUQM7F", produtoQuilo2.getNome());
      assertEquals((-243.99445572), produtoQuilo2.getValor(), 0.01);
      assertEquals("", produtoQuilo3.getNome());
      assertEquals("", produtoQuilo3.getCodigo());
      assertEquals((-243.99445572), produtoQuilo3.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo3.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo4));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo3));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo4));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo3));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo4));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo3));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo4));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo2));
      
      EstoqueDeProdutos.adicionarProduto(produtoQuilo0, 1865.5424194269165);
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo4);
      assertNotSame(produtoQuilo0, produtoQuilo3);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertEquals(1097.7056, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(1097.7056, produtoQuilo0.getValor(), 0.01);
      assertEquals("com.example.Produto", produtoQuilo0.getNome());
      assertEquals("qLxk^DFF", produtoQuilo0.getCodigo());
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo4));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo3));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      
      ProdutoQuilo produtoQuilo5 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo3);
      assertNotNull(produtoQuilo5);
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo4);
      assertNotSame(produtoQuilo0, produtoQuilo3);
      assertNotSame(produtoQuilo0, produtoQuilo5);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertNotSame(produtoQuilo5, produtoQuilo2);
      assertNotSame(produtoQuilo5, produtoQuilo4);
      assertNotSame(produtoQuilo5, produtoQuilo1);
      assertNotSame(produtoQuilo5, produtoQuilo3);
      assertNotSame(produtoQuilo5, produtoQuilo0);
      assertNotSame(produtoQuilo1, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo5);
      assertNotSame(produtoQuilo1, produtoQuilo4);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertNotSame(produtoQuilo1, produtoQuilo3);
      assertNotSame(produtoQuilo2, produtoQuilo5);
      assertNotSame(produtoQuilo2, produtoQuilo1);
      assertNotSame(produtoQuilo2, produtoQuilo4);
      assertNotSame(produtoQuilo2, produtoQuilo3);
      assertNotSame(produtoQuilo2, produtoQuilo0);
      assertNotSame(produtoQuilo3, produtoQuilo0);
      assertNotSame(produtoQuilo3, produtoQuilo1);
      assertNotSame(produtoQuilo3, produtoQuilo4);
      assertNotSame(produtoQuilo3, produtoQuilo2);
      assertNotSame(produtoQuilo3, produtoQuilo5);
      assertEquals(1097.7056, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(1097.7056, produtoQuilo0.getValor(), 0.01);
      assertEquals("com.example.Produto", produtoQuilo0.getNome());
      assertEquals("qLxk^DFF", produtoQuilo0.getCodigo());
      assertEquals("", produtoQuilo5.getCodigo());
      assertEquals("", produtoQuilo5.getNome());
      assertEquals(0.0, produtoQuilo5.getQtdQuilos(), 0.01);
      assertEquals((-243.99445572), produtoQuilo5.getValor(), 0.01);
      assertEquals("com.example.Produto", produtoQuilo1.getNome());
      assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals((-243.99445572), produtoQuilo1.getValor(), 0.01);
      assertEquals("", produtoQuilo2.getCodigo());
      assertEquals(0.0, produtoQuilo2.getQtdQuilos(), 0.01);
      assertEquals("63)&dUQM7F", produtoQuilo2.getNome());
      assertEquals((-243.99445572), produtoQuilo2.getValor(), 0.01);
      assertEquals("", produtoQuilo3.getNome());
      assertEquals("", produtoQuilo3.getCodigo());
      assertEquals((-243.99445572), produtoQuilo3.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo3.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo4));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo3));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo5.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo5.equals((Object)produtoQuilo4));
      assertFalse(produtoQuilo5.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo5.equals((Object)produtoQuilo3));
      assertFalse(produtoQuilo5.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo4));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo3));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo4));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo3));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo4));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo2));
      
      ProdutoQuilo produtoQuilo6 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo4);
      assertNotNull(produtoQuilo6);
      assertNotSame(produtoQuilo4, produtoQuilo0);
      assertNotSame(produtoQuilo4, produtoQuilo1);
      assertNotSame(produtoQuilo4, produtoQuilo3);
      assertNotSame(produtoQuilo4, produtoQuilo5);
      assertNotSame(produtoQuilo4, produtoQuilo6);
      assertNotSame(produtoQuilo4, produtoQuilo2);
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo4);
      assertNotSame(produtoQuilo0, produtoQuilo3);
      assertNotSame(produtoQuilo0, produtoQuilo5);
      assertNotSame(produtoQuilo0, produtoQuilo6);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo6);
      assertNotSame(produtoQuilo1, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo5);
      assertNotSame(produtoQuilo1, produtoQuilo4);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertNotSame(produtoQuilo1, produtoQuilo3);
      assertNotSame(produtoQuilo6, produtoQuilo4);
      assertNotSame(produtoQuilo6, produtoQuilo3);
      assertNotSame(produtoQuilo6, produtoQuilo5);
      assertNotSame(produtoQuilo6, produtoQuilo2);
      assertNotSame(produtoQuilo6, produtoQuilo1);
      assertNotSame(produtoQuilo6, produtoQuilo0);
      assertNotSame(produtoQuilo2, produtoQuilo5);
      assertNotSame(produtoQuilo2, produtoQuilo6);
      assertNotSame(produtoQuilo2, produtoQuilo1);
      assertNotSame(produtoQuilo2, produtoQuilo4);
      assertNotSame(produtoQuilo2, produtoQuilo3);
      assertNotSame(produtoQuilo2, produtoQuilo0);
      assertNotSame(produtoQuilo3, produtoQuilo1);
      assertNotSame(produtoQuilo3, produtoQuilo0);
      assertNotSame(produtoQuilo3, produtoQuilo4);
      assertNotSame(produtoQuilo3, produtoQuilo6);
      assertNotSame(produtoQuilo3, produtoQuilo2);
      assertNotSame(produtoQuilo3, produtoQuilo5);
      assertEquals("63)&dUQM7F", produtoQuilo4.getNome());
      assertEquals((-243.99445572), produtoQuilo4.getValor(), 0.01);
      assertEquals("", produtoQuilo4.getCodigo());
      assertEquals(0.0, produtoQuilo4.getQtdQuilos(), 0.01);
      assertEquals(1097.7056, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(1097.7056, produtoQuilo0.getValor(), 0.01);
      assertEquals("com.example.Produto", produtoQuilo0.getNome());
      assertEquals("qLxk^DFF", produtoQuilo0.getCodigo());
      assertEquals("com.example.Produto", produtoQuilo1.getNome());
      assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals((-243.99445572), produtoQuilo1.getValor(), 0.01);
      assertEquals((-243.99445572), produtoQuilo6.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo6.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo6.getCodigo());
      assertEquals("63)&dUQM7F", produtoQuilo6.getNome());
      assertEquals("", produtoQuilo2.getCodigo());
      assertEquals(0.0, produtoQuilo2.getQtdQuilos(), 0.01);
      assertEquals("63)&dUQM7F", produtoQuilo2.getNome());
      assertEquals((-243.99445572), produtoQuilo2.getValor(), 0.01);
      assertEquals("", produtoQuilo3.getNome());
      assertEquals("", produtoQuilo3.getCodigo());
      assertEquals((-243.99445572), produtoQuilo3.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo3.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo4.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo4.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo4.equals((Object)produtoQuilo3));
      assertFalse(produtoQuilo4.equals((Object)produtoQuilo5));
      assertFalse(produtoQuilo4.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo4));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo3));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo5));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo5));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo4));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo3));
      assertFalse(produtoQuilo6.equals((Object)produtoQuilo4));
      assertFalse(produtoQuilo6.equals((Object)produtoQuilo3));
      assertFalse(produtoQuilo6.equals((Object)produtoQuilo5));
      assertFalse(produtoQuilo6.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo6.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo6.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo5));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo4));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo3));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo4));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo5));
      
      EstoqueDeProdutos.removerProduto("63)&dUQM7F", 0.0);
      EstoqueDeProdutos.Feed();
      EstoqueDeProdutos.mostrarEstoque(0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Boolean boolean0 = new Boolean("Vf@");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = Boolean.logicalXor(false, false);
      assertFalse(boolean1);
      
      boolean boolean2 = EstoqueDeProdutos.produtoParaCompra("Vf@", (-1629.184374168246), boolean0);
      assertFalse(boolean2);
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean2 == boolean1);
      
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo("", "", (-1882.12220480435), (-1629.184374168246));
      assertNotNull(produtoQuilo0);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals((-1882.12220480435), produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getNome());
      assertEquals((-1629.184374168246), produtoQuilo0.getQtdQuilos(), 0.01);
      
      produtoQuilo0.setCodigo("");
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals((-1882.12220480435), produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getNome());
      assertEquals((-1629.184374168246), produtoQuilo0.getQtdQuilos(), 0.01);
      
      ProdutoQuilo produtoQuilo1 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo0);
      assertNotNull(produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals((-1882.12220480435), produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getNome());
      assertEquals((-1629.184374168246), produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo1.getNome());
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals((-1882.12220480435), produtoQuilo1.getValor(), 0.01);
      assertEquals((-1629.184374168246), produtoQuilo1.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      produtoQuilo0.setValor(1591.88880021233);
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals(1591.88880021233, produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getNome());
      assertEquals((-1629.184374168246), produtoQuilo0.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      
      EstoqueDeProdutos.adicionarProduto(produtoQuilo0, 523.9904012455222);
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals(1591.88880021233, produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getNome());
      assertEquals((-1629.184374168246), produtoQuilo0.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      
      produtoQuilo1.setQtdQuilos((-1629.184374168246));
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals(1591.88880021233, produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getNome());
      assertEquals((-1629.184374168246), produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo1.getNome());
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals((-1882.12220480435), produtoQuilo1.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      produtoQuilo1.setCodigo("");
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals(1591.88880021233, produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getNome());
      assertEquals((-1629.184374168246), produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo1.getNome());
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals((-1882.12220480435), produtoQuilo1.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      EstoqueDeProdutos.Feed();
      ProdutoQuilo produtoQuilo2 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo1);
      assertNotNull(produtoQuilo2);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertNotSame(produtoQuilo1, produtoQuilo2);
      assertNotSame(produtoQuilo2, produtoQuilo1);
      assertNotSame(produtoQuilo2, produtoQuilo0);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals(1591.88880021233, produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getNome());
      assertEquals((-1629.184374168246), produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo1.getNome());
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals((-1882.12220480435), produtoQuilo1.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals(0.0, produtoQuilo2.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo2.getNome());
      assertEquals((-1882.12220480435), produtoQuilo2.getValor(), 0.01);
      assertEquals("", produtoQuilo2.getCodigo());
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo0));
      
      EstoqueDeProdutos.exibirEstoqueCliente();
      EstoqueDeProdutos.exibirEstoqueCliente();
      EstoqueDeProdutos estoqueDeProdutos0 = new EstoqueDeProdutos();
      assertNotNull(estoqueDeProdutos0);
      
      EstoqueDeProdutos.Feed();
      EstoqueDeProdutos.removerProduto("%BTh`8XJ~Vy[vlc=", 0.0);
      EstoqueDeProdutos.adicionarProduto(produtoQuilo0, (-1882.12220480435));
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals(1591.88880021233, produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getNome());
      assertEquals((-1629.184374168246), produtoQuilo0.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      
      EstoqueDeProdutos.adicionarProduto(produtoQuilo0, 1591.88880021233);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals(1591.88880021233, produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getNome());
      assertEquals((-1629.184374168246), produtoQuilo0.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      
      ProdutoQuilo produtoQuilo3 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo0);
      assertNotNull(produtoQuilo3);
      assertNotSame(produtoQuilo3, produtoQuilo2);
      assertNotSame(produtoQuilo3, produtoQuilo0);
      assertNotSame(produtoQuilo3, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo3);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertEquals((-1629.184374168246), produtoQuilo3.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo3.getNome());
      assertEquals("", produtoQuilo3.getCodigo());
      assertEquals(1591.88880021233, produtoQuilo3.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals(1591.88880021233, produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getNome());
      assertEquals((-1629.184374168246), produtoQuilo0.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      
      EstoqueDeProdutos.adicionarProduto(produtoQuilo3, (-2613.459047374));
      assertNotSame(produtoQuilo3, produtoQuilo2);
      assertNotSame(produtoQuilo3, produtoQuilo0);
      assertNotSame(produtoQuilo3, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo3);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertEquals((-1629.184374168246), produtoQuilo3.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo3.getNome());
      assertEquals("", produtoQuilo3.getCodigo());
      assertEquals(1591.88880021233, produtoQuilo3.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals(1591.88880021233, produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getNome());
      assertEquals((-1629.184374168246), produtoQuilo0.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo3));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = EstoqueDeProdutos.precoPorCodigo("");
      //  // Unstable assertion: assertEquals(0.0, double0, 0.01);
      //  // Unstable assertion: assertEquals(150.0, double0, 0.01);
      
      EstoqueDeProdutos.exibirEstoqueCliente();
      EstoqueDeProdutos.removerProduto((String) null, 0.0);
      EstoqueDeProdutos.mostrarEstoque(1);
      EstoqueDeProdutos.Feed();
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo("", (String) null, 35.0, 0.0);
      //  // Unstable assertion: assertNotNull(produtoQuilo0);
      //  // Unstable assertion: assertEquals(35.0, produtoQuilo0.getValor(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getCodigo());
      //  // Unstable assertion: assertNull(produtoQuilo0.getNome());
      
      ProdutoQuilo produtoQuilo1 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo0);
      //  // Unstable assertion: assertNotNull(produtoQuilo1);
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo1);
      //  // Unstable assertion: assertNotSame(produtoQuilo1, produtoQuilo0);
      //  // Unstable assertion: assertEquals(35.0, produtoQuilo0.getValor(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getCodigo());
      //  // Unstable assertion: assertNull(produtoQuilo0.getNome());
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertEquals(35.0, produtoQuilo1.getValor(), 0.01);
      //  // Unstable assertion: assertEquals("", produtoQuilo1.getCodigo());
      //  // Unstable assertion: assertNull(produtoQuilo1.getNome());
      //  // Unstable assertion: assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      produtoQuilo1.setCodigo("");
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo1);
      //  // Unstable assertion: assertNotSame(produtoQuilo1, produtoQuilo0);
      //  // Unstable assertion: assertEquals(35.0, produtoQuilo0.getValor(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getCodigo());
      //  // Unstable assertion: assertNull(produtoQuilo0.getNome());
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertEquals(35.0, produtoQuilo1.getValor(), 0.01);
      //  // Unstable assertion: assertEquals("", produtoQuilo1.getCodigo());
      //  // Unstable assertion: assertNull(produtoQuilo1.getNome());
      //  // Unstable assertion: assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      //  // Unstable assertion: assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      produtoQuilo1.setCodigo((String) null);
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo1);
      //  // Unstable assertion: assertNotSame(produtoQuilo1, produtoQuilo0);
      //  // Unstable assertion: assertEquals(35.0, produtoQuilo0.getValor(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getCodigo());
      //  // Unstable assertion: assertNull(produtoQuilo0.getNome());
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertEquals(35.0, produtoQuilo1.getValor(), 0.01);
      //  // Unstable assertion: assertNull(produtoQuilo1.getCodigo());
      //  // Unstable assertion: assertNull(produtoQuilo1.getNome());
      //  // Unstable assertion: assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      //  // Unstable assertion: assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      produtoQuilo1.setCodigo("Cerveja 600 ml");
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo1);
      //  // Unstable assertion: assertNotSame(produtoQuilo1, produtoQuilo0);
      //  // Unstable assertion: assertEquals(35.0, produtoQuilo0.getValor(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getCodigo());
      //  // Unstable assertion: assertNull(produtoQuilo0.getNome());
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertEquals(35.0, produtoQuilo1.getValor(), 0.01);
      //  // Unstable assertion: assertEquals("Cerveja 600 ml", produtoQuilo1.getCodigo());
      //  // Unstable assertion: assertNull(produtoQuilo1.getNome());
      //  // Unstable assertion: assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      //  // Unstable assertion: assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      EstoqueDeProdutos.adicionarProduto(produtoQuilo1, 0.65);
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo1);
      //  // Unstable assertion: assertNotSame(produtoQuilo1, produtoQuilo0);
      //  // Unstable assertion: assertEquals(35.0, produtoQuilo0.getValor(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getCodigo());
      //  // Unstable assertion: assertNull(produtoQuilo0.getNome());
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertEquals(35.0, produtoQuilo1.getValor(), 0.01);
      //  // Unstable assertion: assertEquals("Cerveja 600 ml", produtoQuilo1.getCodigo());
      //  // Unstable assertion: assertNull(produtoQuilo1.getNome());
      //  // Unstable assertion: assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      //  // Unstable assertion: assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      Produto produto0 = EstoqueDeProdutos.seekProduto("30");
      //  // Unstable assertion: assertNotNull(produto0);
      //  // Unstable assertion: assertEquals("30", produto0.getCodigo());
      //  // Unstable assertion: assertEquals(1.5, produto0.getValor(), 0.01);
      //  // Unstable assertion: assertEquals("Pacote de a\u00E7\u00FAcar", produto0.getNome());
      
      EstoqueDeProdutos.exibirEstoqueCliente();
      Produto produto1 = EstoqueDeProdutos.seekProduto((String) null);
      //  // Unstable assertion: assertNotNull(produto1);
      //  // Unstable assertion: assertNotSame(produto1, produto0);
      //  // Unstable assertion: assertEquals(0.0, produto1.getValor(), 0.01);
      //  // Unstable assertion: assertEquals("", produto1.getNome());
      //  // Unstable assertion: assertNull(produto1.getCodigo());
      //  // Unstable assertion: assertFalse(produto1.equals((Object)produto0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ProdutoUnitario produtoUnitario0 = new ProdutoUnitario((String) null, (String) null, 0.0);
      assertNotNull(produtoUnitario0);
      assertEquals(0.0, produtoUnitario0.getValor(), 0.01);
      assertNull(produtoUnitario0.getNome());
      assertNull(produtoUnitario0.getCodigo());
      
      produtoUnitario0.setValor(2144.204631);
      assertEquals(2144.204631, produtoUnitario0.getValor(), 0.01);
      assertNull(produtoUnitario0.getNome());
      assertNull(produtoUnitario0.getCodigo());
      
      produtoUnitario0.setNome("");
      assertEquals(2144.204631, produtoUnitario0.getValor(), 0.01);
      assertEquals("", produtoUnitario0.getNome());
      assertNull(produtoUnitario0.getCodigo());
      
      produtoUnitario0.setValor(0.0);
      assertEquals(0.0, produtoUnitario0.getValor(), 0.01);
      assertEquals("", produtoUnitario0.getNome());
      assertNull(produtoUnitario0.getCodigo());
      
      produtoUnitario0.setValor(0.0);
      assertEquals(0.0, produtoUnitario0.getValor(), 0.01);
      assertEquals("", produtoUnitario0.getNome());
      assertNull(produtoUnitario0.getCodigo());
      
      EstoqueDeProdutos.adicionarProduto(produtoUnitario0, 4328.630908376317);
      assertEquals(0.0, produtoUnitario0.getValor(), 0.01);
      assertEquals("", produtoUnitario0.getNome());
      assertNull(produtoUnitario0.getCodigo());
      
      // Undeclared exception!
      try { 
        EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoUnitario0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.example.ProdutoUnitario cannot be cast to com.example.ProdutoQuilo
         //
         verifyException("com.example.EstoqueDeProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EstoqueDeProdutos.copiarEstoque();
      EstoqueDeProdutos.removerProduto("Y43Iwq", 2191.0);
      EstoqueDeProdutos.mostrarEstoque(1);
      EstoqueDeProdutos.copiarEstoque();
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo("kg\n", "+w Om5%`f", 0.0, 1);
      assertNotNull(produtoQuilo0);
      assertEquals("+w Om5%`f", produtoQuilo0.getNome());
      assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      assertEquals(1.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("kg\n", produtoQuilo0.getCodigo());
      
      produtoQuilo0.setNome("Mandioca");
      assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      assertEquals(1.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("kg\n", produtoQuilo0.getCodigo());
      assertEquals("Mandioca", produtoQuilo0.getNome());
      
      produtoQuilo0.setValor((-3649.1));
      assertEquals(1.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("kg\n", produtoQuilo0.getCodigo());
      assertEquals("Mandioca", produtoQuilo0.getNome());
      assertEquals((-3649.1), produtoQuilo0.getValor(), 0.01);
      
      produtoQuilo0.setNome("vRAV z");
      assertEquals(1.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("kg\n", produtoQuilo0.getCodigo());
      assertEquals("vRAV z", produtoQuilo0.getNome());
      assertEquals((-3649.1), produtoQuilo0.getValor(), 0.01);
      
      produtoQuilo0.setValor((-139.24843));
      assertEquals(1.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("kg\n", produtoQuilo0.getCodigo());
      assertEquals("vRAV z", produtoQuilo0.getNome());
      assertEquals((-139.24843), produtoQuilo0.getValor(), 0.01);
      
      produtoQuilo0.setNome("Saco de biscoito");
      assertEquals("Saco de biscoito", produtoQuilo0.getNome());
      assertEquals(1.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("kg\n", produtoQuilo0.getCodigo());
      assertEquals((-139.24843), produtoQuilo0.getValor(), 0.01);
      
      produtoQuilo0.setCodigo("+w Om5%`f");
      assertEquals("+w Om5%`f", produtoQuilo0.getCodigo());
      assertEquals("Saco de biscoito", produtoQuilo0.getNome());
      assertEquals(1.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals((-139.24843), produtoQuilo0.getValor(), 0.01);
      
      produtoQuilo0.setQtdQuilos(2191.0);
      assertEquals(2191.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("+w Om5%`f", produtoQuilo0.getCodigo());
      assertEquals("Saco de biscoito", produtoQuilo0.getNome());
      assertEquals((-139.24843), produtoQuilo0.getValor(), 0.01);
      
      produtoQuilo0.setQtdQuilos(0.0);
      assertEquals("+w Om5%`f", produtoQuilo0.getCodigo());
      assertEquals("Saco de biscoito", produtoQuilo0.getNome());
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals((-139.24843), produtoQuilo0.getValor(), 0.01);
      
      ProdutoQuilo produtoQuilo1 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo0);
      assertNotNull(produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertEquals("+w Om5%`f", produtoQuilo0.getCodigo());
      assertEquals("Saco de biscoito", produtoQuilo0.getNome());
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals((-139.24843), produtoQuilo0.getValor(), 0.01);
      assertEquals("+w Om5%`f", produtoQuilo1.getCodigo());
      assertEquals("Saco de biscoito", produtoQuilo1.getNome());
      assertEquals((-139.24843), produtoQuilo1.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      EstoqueDeProdutos.exibirCopiaInicialDoEstoque();
      // Undeclared exception!
      EstoqueDeProdutos.exibirCopiaInicialDoEstoque();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = EstoqueDeProdutos.precoPorCodigo("xs");
      //  // Unstable assertion: assertEquals(0.0, double0, 0.01);
      
      EstoqueDeProdutos.mostrarEstoque((-1));
      double double1 = EstoqueDeProdutos.precoPorCodigo("");
      //  // Unstable assertion: assertEquals(0.0, double1, 0.01);
      //  // Unstable assertion: assertEquals(double1, double0, 0.01);
      
      double double2 = EstoqueDeProdutos.precoPorCodigo("");
      //  // Unstable assertion: assertEquals(0.0, double2, 0.01);
      //  // Unstable assertion: assertEquals(double2, double0, 0.01);
      //  // Unstable assertion: assertEquals(double2, double1, 0.01);
      
      double double3 = EstoqueDeProdutos.precoPorCodigo("40");
      //  // Unstable assertion: assertEquals(5.5, double3, 0.01);
      //  // Unstable assertion: assertNotEquals(double3, double0, 0.01);
      //  // Unstable assertion: assertNotEquals(double3, double2, 0.01);
      //  // Unstable assertion: assertNotEquals(double3, double1, 0.01);
      
      EstoqueDeProdutos estoqueDeProdutos0 = new EstoqueDeProdutos();
      //  // Unstable assertion: assertNotNull(estoqueDeProdutos0);
      
      EstoqueDeProdutos.Feed();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EstoqueDeProdutos.exibirEstoqueCliente();
      EstoqueDeProdutos.exibirEstoqueCliente();
      EstoqueDeProdutos.mostrarEstoque((-1));
      ProdutoUnitario produtoUnitario0 = new ProdutoUnitario((String) null, (String) null, 0.0);
      assertNotNull(produtoUnitario0);
      assertNull(produtoUnitario0.getCodigo());
      assertEquals(0.0, produtoUnitario0.getValor(), 0.01);
      assertNull(produtoUnitario0.getNome());
      
      produtoUnitario0.setNome((String) null);
      assertNull(produtoUnitario0.getCodigo());
      assertEquals(0.0, produtoUnitario0.getValor(), 0.01);
      assertNull(produtoUnitario0.getNome());
      
      produtoUnitario0.setNome((String) null);
      assertNull(produtoUnitario0.getCodigo());
      assertEquals(0.0, produtoUnitario0.getValor(), 0.01);
      assertNull(produtoUnitario0.getNome());
      
      EstoqueDeProdutos.adicionarProduto(produtoUnitario0, 0.0);
      assertNull(produtoUnitario0.getCodigo());
      assertEquals(0.0, produtoUnitario0.getValor(), 0.01);
      assertNull(produtoUnitario0.getNome());
      
      EstoqueDeProdutos.Feed();
      double double0 = EstoqueDeProdutos.precoPorCodigo((String) null);
      assertEquals(0.0, double0, 0.01);
      
      EstoqueDeProdutos.exibirEstoqueCliente();
      EstoqueDeProdutos.exibirEstoqueCliente();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EstoqueDeProdutos.mostrarEstoque(0);
      EstoqueDeProdutos.removerProduto("j>1BE+h", 0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EstoqueDeProdutos.copiarEstoque();
      Produto produto0 = EstoqueDeProdutos.seekProduto("");
      assertNull(produto0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EstoqueDeProdutos.mostrarEstoque(2414);
      EstoqueDeProdutos.removerProduto("", 1.0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = 1252.32439192036;
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = EstoqueDeProdutos.produtoParaCompra("Cerveja 600 ml", 1252.32439192036, boolean0);
      assertFalse(boolean1);
      
      EstoqueDeProdutos estoqueDeProdutos0 = new EstoqueDeProdutos();
      assertNotNull(estoqueDeProdutos0);
      
      ProdutoUnitario produtoUnitario0 = new ProdutoUnitario("", "Cerveja 600 ml", 1252.32439192036);
      assertNotNull(produtoUnitario0);
      assertEquals("Cerveja 600 ml", produtoUnitario0.getNome());
      assertEquals(1252.32439192036, produtoUnitario0.getValor(), 0.01);
      assertEquals("", produtoUnitario0.getCodigo());
      
      // Undeclared exception!
      try { 
        EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoUnitario0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.example.ProdutoUnitario cannot be cast to com.example.ProdutoQuilo
         //
         verifyException("com.example.EstoqueDeProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EstoqueDeProdutos.mostrarEstoque(1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EstoqueDeProdutos.exibirEstoqueCliente();
      boolean boolean0 = EstoqueDeProdutos.produtoParaCompra("Saco de biscoito", (-2137.1046369671), (Boolean) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Produto produto0 = EstoqueDeProdutos.seekProduto("JL9'j*");
      assertNull(produto0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "O3\"y+e}B";
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo("", "O3\"y+e}B", 150.0, 150.0);
      assertNotNull(produtoQuilo0);
      assertEquals(150.0, produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals(150.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("O3\"y+e}B", produtoQuilo0.getNome());
      
      produtoQuilo0.setNome("O3\"y+e}B");
      assertEquals(150.0, produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals(150.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("O3\"y+e}B", produtoQuilo0.getNome());
      
      produtoQuilo0.setNome("");
      assertEquals(150.0, produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals(150.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo0.getNome());
      
      ProdutoQuilo produtoQuilo1 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo0);
      assertNotNull(produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertEquals(150.0, produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals(150.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo0.getNome());
      assertEquals("", produtoQuilo1.getNome());
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals(150.0, produtoQuilo1.getValor(), 0.01);
      assertEquals(150.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      produtoQuilo0.setNome((String) null);
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertEquals(150.0, produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals(150.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertNull(produtoQuilo0.getNome());
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      
      produtoQuilo0.setQtdQuilos(150.0);
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertEquals(150.0, produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals(150.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertNull(produtoQuilo0.getNome());
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      
      produtoQuilo1.setNome("");
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertEquals(150.0, produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals(150.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertNull(produtoQuilo0.getNome());
      assertEquals("", produtoQuilo1.getNome());
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals(150.0, produtoQuilo1.getValor(), 0.01);
      assertEquals(150.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      EstoqueDeProdutos.mostrarEstoque((-1));
      produtoQuilo0.setCodigo("O3\"y+e}B");
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertEquals(150.0, produtoQuilo0.getValor(), 0.01);
      assertEquals(150.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertNull(produtoQuilo0.getNome());
      assertEquals("O3\"y+e}B", produtoQuilo0.getCodigo());
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      
      produtoQuilo1.setCodigo("");
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertEquals(150.0, produtoQuilo0.getValor(), 0.01);
      assertEquals(150.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertNull(produtoQuilo0.getNome());
      assertEquals("O3\"y+e}B", produtoQuilo0.getCodigo());
      assertEquals("", produtoQuilo1.getNome());
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals(150.0, produtoQuilo1.getValor(), 0.01);
      assertEquals(150.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      EstoqueDeProdutos.adicionarProduto(produtoQuilo1, 1948.9039972);
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertEquals(150.0, produtoQuilo0.getValor(), 0.01);
      assertEquals(150.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertNull(produtoQuilo0.getNome());
      assertEquals("O3\"y+e}B", produtoQuilo0.getCodigo());
      assertEquals("", produtoQuilo1.getNome());
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals(150.0, produtoQuilo1.getValor(), 0.01);
      assertEquals(150.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      // Undeclared exception!
      try { 
        EstoqueDeProdutos.exibirCopiaInicialDoEstoque();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EstoqueDeProdutos.copiarEstoque();
      // Undeclared exception!
      try { 
        EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario((Produto) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.example.EstoqueDeProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "90";
      Produto produto0 = EstoqueDeProdutos.seekProduto("90");
      assertNull(produto0);
      
      int int0 = 2868;
      EstoqueDeProdutos.mostrarEstoque(2868);
      // Undeclared exception!
      try { 
        EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario((Produto) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.example.EstoqueDeProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Produto produto0 = EstoqueDeProdutos.seekProduto("*****************************************************************");
      assertNull(produto0);
      
      ProdutoUnitario produtoUnitario0 = new ProdutoUnitario((String) null, "*****************************************************************", 1.99);
      assertNotNull(produtoUnitario0);
      assertNull(produtoUnitario0.getCodigo());
      assertEquals(1.99, produtoUnitario0.getValor(), 0.01);
      assertEquals("*****************************************************************", produtoUnitario0.getNome());
      
      produtoUnitario0.setCodigo("*****************************************************************");
      assertEquals(1.99, produtoUnitario0.getValor(), 0.01);
      assertEquals("*****************************************************************", produtoUnitario0.getCodigo());
      assertEquals("*****************************************************************", produtoUnitario0.getNome());
      
      produtoUnitario0.setNome((String) null);
      assertNull(produtoUnitario0.getNome());
      assertEquals(1.99, produtoUnitario0.getValor(), 0.01);
      assertEquals("*****************************************************************", produtoUnitario0.getCodigo());
      
      produtoUnitario0.setValor((-891.1475274124));
      assertNull(produtoUnitario0.getNome());
      assertEquals("*****************************************************************", produtoUnitario0.getCodigo());
      assertEquals((-891.1475274124), produtoUnitario0.getValor(), 0.01);
      
      produtoUnitario0.setValor(1715.8444104980338);
      assertNull(produtoUnitario0.getNome());
      assertEquals("*****************************************************************", produtoUnitario0.getCodigo());
      assertEquals(1715.8444104980338, produtoUnitario0.getValor(), 0.01);
      
      EstoqueDeProdutos.adicionarProduto(produtoUnitario0, 1541.0361828);
      assertNull(produtoUnitario0.getNome());
      assertEquals("*****************************************************************", produtoUnitario0.getCodigo());
      assertEquals(1715.8444104980338, produtoUnitario0.getValor(), 0.01);
      
      EstoqueDeProdutos.mostrarEstoque(3180);
      EstoqueDeProdutos.removerProduto("*****************************************************************", 1.99);
      EstoqueDeProdutos.mostrarEstoque((-5287));
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean boolean1 = Boolean.logicalOr(false, false);
      assertFalse(boolean1);
      
      boolean boolean2 = Boolean.logicalOr(true, true);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = EstoqueDeProdutos.produtoParaCompra("SklE", 1715.8444104980338, boolean0);
      assertFalse(boolean3);
      assertTrue(boolean0.equals((Object)boolean2));
      assertFalse(boolean0.equals((Object)boolean1));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo("*****************************************************************", "SklE", (-1821.4167746461646), (-1821.4167746461646));
      assertNotNull(produtoQuilo0);
      assertEquals((-1821.4167746461646), produtoQuilo0.getValor(), 0.01);
      assertEquals("SklE", produtoQuilo0.getNome());
      assertEquals((-1821.4167746461646), produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("*****************************************************************", produtoQuilo0.getCodigo());
      
      produtoQuilo0.setCodigo("hQkvFg&y-6Fh;(");
      assertEquals("hQkvFg&y-6Fh;(", produtoQuilo0.getCodigo());
      assertEquals((-1821.4167746461646), produtoQuilo0.getValor(), 0.01);
      assertEquals("SklE", produtoQuilo0.getNome());
      assertEquals((-1821.4167746461646), produtoQuilo0.getQtdQuilos(), 0.01);
      
      ProdutoQuilo produtoQuilo1 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo0);
      assertNotNull(produtoQuilo1);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertEquals((-1821.4167746461646), produtoQuilo1.getValor(), 0.01);
      assertEquals((-1821.4167746461646), produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals("hQkvFg&y-6Fh;(", produtoQuilo1.getCodigo());
      assertEquals("SklE", produtoQuilo1.getNome());
      assertEquals("hQkvFg&y-6Fh;(", produtoQuilo0.getCodigo());
      assertEquals((-1821.4167746461646), produtoQuilo0.getValor(), 0.01);
      assertEquals("SklE", produtoQuilo0.getNome());
      assertEquals((-1821.4167746461646), produtoQuilo0.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      
      double double0 = EstoqueDeProdutos.precoPorCodigo("SklE");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EstoqueDeProdutos estoqueDeProdutos0 = new EstoqueDeProdutos();
      Boolean boolean0 = new Boolean(true);
      EstoqueDeProdutos.produtoParaCompra("11", 9.0, boolean0);
      EstoqueDeProdutos.copiarEstoque();
      EstoqueDeProdutos.Feed();
      EstoqueDeProdutos.mostrarEstoque(3708);
      EstoqueDeProdutos.mostrarEstoque(2090970920);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EstoqueDeProdutos.precoPorCodigo("#`LT%Hb4B");
      // Undeclared exception!
      try { 
        EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario((Produto) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.example.EstoqueDeProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "";
      EstoqueDeProdutos.seekProduto("");
      EstoqueDeProdutos.precoPorCodigo("");
      // Undeclared exception!
      try { 
        EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario((Produto) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.example.EstoqueDeProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EstoqueDeProdutos.removerProduto((String) null, 578.0);
      EstoqueDeProdutos.copiarEstoque();
      EstoqueDeProdutos.exibirCopiaInicialDoEstoque();
      EstoqueDeProdutos.seekProduto((String) null);
      // Undeclared exception!
      try { 
        EstoqueDeProdutos.adicionarProduto((Produto) null, 4623.1463);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo("?cf.23>!b$r9 &ggd", "cY~*HGbiv^dpv", (-982.7851), 1.0);
      produtoQuilo0.setCodigo("pK?S[S^Zk>5kSO");
      produtoQuilo0.setValor(0.0);
      produtoQuilo0.setCodigo("rjk)r+Q&EHmd]i\"");
      EstoqueDeProdutos.adicionarProduto(produtoQuilo0, 1.0);
      EstoqueDeProdutos.seekProduto("*                            Aguarde...                         *");
      Boolean boolean0 = Boolean.valueOf(true);
      Boolean.logicalXor(true, true);
      EstoqueDeProdutos.produtoParaCompra("*                            Aguarde...                         *", (-982.7851), boolean0);
      EstoqueDeProdutos.removerProduto("cY~*HGbiv^dpv", (-1802.7796904087038));
      EstoqueDeProdutos.precoPorCodigo("?cf.23>!b$r9 &ggd");
      EstoqueDeProdutos.precoPorCodigo("?cf.23>!b$r9 &ggd");
      EstoqueDeProdutos.Feed();
      Boolean boolean1 = new Boolean(true);
      EstoqueDeProdutos.produtoParaCompra("BFSiS75:dx1z49$`W", 0.0, boolean1);
      // Undeclared exception!
      try { 
        EstoqueDeProdutos.adicionarProduto((Produto) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo("", "", 0.0, 0.0);
      EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo0);
      EstoqueDeProdutos.Feed();
      EstoqueDeProdutos estoqueDeProdutos0 = new EstoqueDeProdutos();
      EstoqueDeProdutos.seekProduto("");
      // Undeclared exception!
      try { 
        EstoqueDeProdutos.mostrarEstoque(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
