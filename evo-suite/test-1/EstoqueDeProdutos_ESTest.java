/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 15 17:04:25 GMT 2024
 */

package com.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.example.EstoqueDeProdutos;
import com.example.Produto;
import com.example.ProdutoQuilo;
import com.example.ProdutoUnitario;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EstoqueDeProdutos_ESTest extends EstoqueDeProdutos_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EstoqueDeProdutos.copiarEstoque();
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo("6d-", "6d-", 46.6669857, 46.6669857);
      assertEquals("6d-", produtoQuilo0.getCodigo());
      assertEquals("6d-", produtoQuilo0.getNome());
      assertEquals(46.6669857, produtoQuilo0.getValor(), 0.01);
      assertEquals(46.6669857, produtoQuilo0.getQtdQuilos(), 0.01);
      assertNotNull(produtoQuilo0);
      
      produtoQuilo0.setNome("com.example.Produto");
      assertEquals("com.example.Produto", produtoQuilo0.getNome());
      assertEquals("6d-", produtoQuilo0.getCodigo());
      assertEquals(46.6669857, produtoQuilo0.getValor(), 0.01);
      assertEquals(46.6669857, produtoQuilo0.getQtdQuilos(), 0.01);
      
      produtoQuilo0.setValor(46.6669857);
      assertEquals("com.example.Produto", produtoQuilo0.getNome());
      assertEquals("6d-", produtoQuilo0.getCodigo());
      assertEquals(46.6669857, produtoQuilo0.getValor(), 0.01);
      assertEquals(46.6669857, produtoQuilo0.getQtdQuilos(), 0.01);
      
      produtoQuilo0.setNome("6d-");
      assertEquals("6d-", produtoQuilo0.getCodigo());
      assertEquals("6d-", produtoQuilo0.getNome());
      assertEquals(46.6669857, produtoQuilo0.getValor(), 0.01);
      assertEquals(46.6669857, produtoQuilo0.getQtdQuilos(), 0.01);
      
      produtoQuilo0.setCodigo("6d-");
      assertEquals("6d-", produtoQuilo0.getCodigo());
      assertEquals("6d-", produtoQuilo0.getNome());
      assertEquals(46.6669857, produtoQuilo0.getValor(), 0.01);
      assertEquals(46.6669857, produtoQuilo0.getQtdQuilos(), 0.01);
      
      produtoQuilo0.setCodigo("com.example.Produto");
      assertEquals("com.example.Produto", produtoQuilo0.getCodigo());
      assertEquals("6d-", produtoQuilo0.getNome());
      assertEquals(46.6669857, produtoQuilo0.getValor(), 0.01);
      assertEquals(46.6669857, produtoQuilo0.getQtdQuilos(), 0.01);
      
      produtoQuilo0.setNome(":rPJt:CY*U");
      assertEquals(":rPJt:CY*U", produtoQuilo0.getNome());
      assertEquals("com.example.Produto", produtoQuilo0.getCodigo());
      assertEquals(46.6669857, produtoQuilo0.getValor(), 0.01);
      assertEquals(46.6669857, produtoQuilo0.getQtdQuilos(), 0.01);
      
      EstoqueDeProdutos.adicionarProduto(produtoQuilo0, (-153.446718646148));
      assertEquals(":rPJt:CY*U", produtoQuilo0.getNome());
      assertEquals("com.example.Produto", produtoQuilo0.getCodigo());
      assertEquals(46.6669857, produtoQuilo0.getValor(), 0.01);
      assertEquals(46.6669857, produtoQuilo0.getQtdQuilos(), 0.01);
      
      produtoQuilo0.setCodigo(":rPJt:CY*U");
      assertEquals(":rPJt:CY*U", produtoQuilo0.getCodigo());
      assertEquals(":rPJt:CY*U", produtoQuilo0.getNome());
      assertEquals(46.6669857, produtoQuilo0.getValor(), 0.01);
      assertEquals(46.6669857, produtoQuilo0.getQtdQuilos(), 0.01);
      
      EstoqueDeProdutos.Feed();
      EstoqueDeProdutos.removerProduto(":rPJt:CY*U", (-153.446718646148));
      EstoqueDeProdutos.adicionarProduto(produtoQuilo0, (-980.888283));
      assertEquals(":rPJt:CY*U", produtoQuilo0.getCodigo());
      assertEquals(":rPJt:CY*U", produtoQuilo0.getNome());
      assertEquals(46.6669857, produtoQuilo0.getValor(), 0.01);
      assertEquals(46.6669857, produtoQuilo0.getQtdQuilos(), 0.01);
      
      double double0 = EstoqueDeProdutos.precoPorCodigo(":rPJt:CY*U");
      assertEquals(46.6669857, double0, 0.01);
      
      EstoqueDeProdutos.exibirEstoqueCliente();
      boolean boolean0 = Boolean.logicalOr(false, false);
      assertFalse(boolean0);
      
      int int0 = Boolean.compare(false, false);
      assertEquals(0, int0);
      
      boolean boolean1 = Boolean.logicalAnd(true, true);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = Boolean.logicalXor(true, false);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3);
      
      boolean boolean4 = EstoqueDeProdutos.produtoParaCompra(":rPJt:CY*U", 46.6669857, boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4);
      
      EstoqueDeProdutos.exibirEstoqueCliente();
      ProdutoQuilo produtoQuilo1 = (ProdutoQuilo)EstoqueDeProdutos.seekProduto("com.example.Produto");
      assertEquals(46.6669857, produtoQuilo1.getValor(), 0.01);
      assertEquals(46.6669857, produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals(":rPJt:CY*U", produtoQuilo1.getCodigo());
      assertEquals(":rPJt:CY*U", produtoQuilo1.getNome());
      assertNotNull(produtoQuilo1);
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      assertNotSame(produtoQuilo1, produtoQuilo0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EstoqueDeProdutos.copiarEstoque();
      EstoqueDeProdutos.exibirCopiaInicialDoEstoque();
      EstoqueDeProdutos.exibirEstoqueCliente();
      EstoqueDeProdutos.Feed();
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo("Kp3+RQ{*V\"7tT", "Kp3+RQ{*V\"7tT", (-347.5618885941274), (-347.5618885941274));
      assertEquals((-347.5618885941274), produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals((-347.5618885941274), produtoQuilo0.getValor(), 0.01);
      assertEquals("Kp3+RQ{*V\"7tT", produtoQuilo0.getNome());
      assertEquals("Kp3+RQ{*V\"7tT", produtoQuilo0.getCodigo());
      assertNotNull(produtoQuilo0);
      
      ProdutoQuilo produtoQuilo1 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo0);
      assertEquals((-347.5618885941274), produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals((-347.5618885941274), produtoQuilo0.getValor(), 0.01);
      assertEquals("Kp3+RQ{*V\"7tT", produtoQuilo0.getNome());
      assertEquals("Kp3+RQ{*V\"7tT", produtoQuilo0.getCodigo());
      assertEquals("Kp3+RQ{*V\"7tT", produtoQuilo1.getNome());
      assertEquals((-347.5618885941274), produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals("Kp3+RQ{*V\"7tT", produtoQuilo1.getCodigo());
      assertEquals((-347.5618885941274), produtoQuilo1.getValor(), 0.01);
      assertNotNull(produtoQuilo1);
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      
      ProdutoQuilo produtoQuilo2 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo1);
      assertEquals((-347.5618885941274), produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals((-347.5618885941274), produtoQuilo0.getValor(), 0.01);
      assertEquals("Kp3+RQ{*V\"7tT", produtoQuilo0.getNome());
      assertEquals("Kp3+RQ{*V\"7tT", produtoQuilo0.getCodigo());
      assertEquals("Kp3+RQ{*V\"7tT", produtoQuilo1.getNome());
      assertEquals((-347.5618885941274), produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals("Kp3+RQ{*V\"7tT", produtoQuilo1.getCodigo());
      assertEquals((-347.5618885941274), produtoQuilo1.getValor(), 0.01);
      assertEquals("Kp3+RQ{*V\"7tT", produtoQuilo2.getNome());
      assertEquals("Kp3+RQ{*V\"7tT", produtoQuilo2.getCodigo());
      assertEquals((-347.5618885941274), produtoQuilo2.getValor(), 0.01);
      assertEquals((-347.5618885941274), produtoQuilo2.getQtdQuilos(), 0.01);
      assertNotNull(produtoQuilo2);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo1));
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertNotSame(produtoQuilo2, produtoQuilo0);
      assertNotSame(produtoQuilo2, produtoQuilo1);
      
      produtoQuilo0.setNome("nv-h20Reer");
      assertEquals("nv-h20Reer", produtoQuilo0.getNome());
      assertEquals((-347.5618885941274), produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals((-347.5618885941274), produtoQuilo0.getValor(), 0.01);
      assertEquals("Kp3+RQ{*V\"7tT", produtoQuilo0.getCodigo());
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      
      produtoQuilo1.setValor(221.0);
      assertEquals("nv-h20Reer", produtoQuilo0.getNome());
      assertEquals((-347.5618885941274), produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals((-347.5618885941274), produtoQuilo0.getValor(), 0.01);
      assertEquals("Kp3+RQ{*V\"7tT", produtoQuilo0.getCodigo());
      assertEquals("Kp3+RQ{*V\"7tT", produtoQuilo1.getNome());
      assertEquals((-347.5618885941274), produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals("Kp3+RQ{*V\"7tT", produtoQuilo1.getCodigo());
      assertEquals(221.0, produtoQuilo1.getValor(), 0.01);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      
      produtoQuilo1.setValor(221.0);
      assertEquals("nv-h20Reer", produtoQuilo0.getNome());
      assertEquals((-347.5618885941274), produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals((-347.5618885941274), produtoQuilo0.getValor(), 0.01);
      assertEquals("Kp3+RQ{*V\"7tT", produtoQuilo0.getCodigo());
      assertEquals("Kp3+RQ{*V\"7tT", produtoQuilo1.getNome());
      assertEquals((-347.5618885941274), produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals("Kp3+RQ{*V\"7tT", produtoQuilo1.getCodigo());
      assertEquals(221.0, produtoQuilo1.getValor(), 0.01);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      
      produtoQuilo1.setQtdQuilos(1111.7359608432992);
      assertEquals("nv-h20Reer", produtoQuilo0.getNome());
      assertEquals((-347.5618885941274), produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals((-347.5618885941274), produtoQuilo0.getValor(), 0.01);
      assertEquals("Kp3+RQ{*V\"7tT", produtoQuilo0.getCodigo());
      assertEquals("Kp3+RQ{*V\"7tT", produtoQuilo1.getNome());
      assertEquals("Kp3+RQ{*V\"7tT", produtoQuilo1.getCodigo());
      assertEquals(221.0, produtoQuilo1.getValor(), 0.01);
      assertEquals(1111.7359608432992, produtoQuilo1.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      
      EstoqueDeProdutos.adicionarProduto(produtoQuilo1, 4729.49794371147);
      assertEquals("nv-h20Reer", produtoQuilo0.getNome());
      assertEquals((-347.5618885941274), produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals((-347.5618885941274), produtoQuilo0.getValor(), 0.01);
      assertEquals("Kp3+RQ{*V\"7tT", produtoQuilo0.getCodigo());
      assertEquals("Kp3+RQ{*V\"7tT", produtoQuilo1.getNome());
      assertEquals("Kp3+RQ{*V\"7tT", produtoQuilo1.getCodigo());
      assertEquals(221.0, produtoQuilo1.getValor(), 0.01);
      assertEquals(1111.7359608432992, produtoQuilo1.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      
      Boolean boolean0 = new Boolean("Kp3+RQ{*V\"7tT");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = Boolean.logicalAnd(true, true);
      assertTrue(boolean1);
      
      boolean boolean2 = EstoqueDeProdutos.produtoParaCompra("Kp3+RQ{*V\"7tT", 221.0, boolean0);
      assertFalse(boolean0.equals((Object)boolean1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      EstoqueDeProdutos.adicionarProduto(produtoQuilo0, 30.0);
      assertEquals("nv-h20Reer", produtoQuilo0.getNome());
      assertEquals((-347.5618885941274), produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals((-347.5618885941274), produtoQuilo0.getValor(), 0.01);
      assertEquals("Kp3+RQ{*V\"7tT", produtoQuilo0.getCodigo());
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      
      Produto produto0 = EstoqueDeProdutos.seekProduto((String) null);
      assertNull(produto0);
      
      EstoqueDeProdutos.exibirCopiaInicialDoEstoque();
      EstoqueDeProdutos.copiarEstoque();
      // Undeclared exception!
      try { 
        EstoqueDeProdutos.produtoParaCompra("61", 905.06325, (Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.example.EstoqueDeProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo("", "", 260.5308, 260.5308);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals(260.5308, produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getNome());
      assertEquals(260.5308, produtoQuilo0.getQtdQuilos(), 0.01);
      assertNotNull(produtoQuilo0);
      
      produtoQuilo0.setQtdQuilos(0.0);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals(260.5308, produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getNome());
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      
      produtoQuilo0.setValor(0.0);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals("", produtoQuilo0.getNome());
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      
      produtoQuilo0.setNome("");
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals("", produtoQuilo0.getNome());
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      
      EstoqueDeProdutos.adicionarProduto(produtoQuilo0, 0.0);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals("", produtoQuilo0.getNome());
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      
      produtoQuilo0.setCodigo("");
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals("", produtoQuilo0.getNome());
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      
      EstoqueDeProdutos.adicionarProduto(produtoQuilo0, (-1662.0));
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals("", produtoQuilo0.getNome());
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      
      EstoqueDeProdutos.removerProduto((String) null, 1.0);
      EstoqueDeProdutos estoqueDeProdutos0 = new EstoqueDeProdutos();
      assertNotNull(estoqueDeProdutos0);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = EstoqueDeProdutos.produtoParaCompra("", 3328.174241148332, boolean0);
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      boolean boolean3 = Boolean.getBoolean("");
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = EstoqueDeProdutos.produtoParaCompra((String) null, 1.0, boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean3));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      EstoqueDeProdutos.adicionarProduto(produtoQuilo0, (-1662.0));
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals("", produtoQuilo0.getNome());
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      
      EstoqueDeProdutos.exibirEstoqueCliente();
      EstoqueDeProdutos.removerProduto("", 1.0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = EstoqueDeProdutos.precoPorCodigo("com.example.ProdutoUnitario");
      assertEquals(0.0, double0, 0.01);
      
      EstoqueDeProdutos.mostrarEstoque((-2938));
      EstoqueDeProdutos.copiarEstoque();
      EstoqueDeProdutos.copiarEstoque();
      EstoqueDeProdutos.mostrarEstoque(0);
      EstoqueDeProdutos.exibirEstoqueCliente();
      EstoqueDeProdutos.copiarEstoque();
      EstoqueDeProdutos estoqueDeProdutos0 = new EstoqueDeProdutos();
      assertNotNull(estoqueDeProdutos0);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean boolean1 = EstoqueDeProdutos.produtoParaCompra("com.example.ProdutoUnitario", 0.0, boolean0);
      assertFalse(boolean1);
      
      EstoqueDeProdutos.copiarEstoque();
      EstoqueDeProdutos.exibirEstoqueCliente();
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo("com.example.ProdutoUnitario", "com.example.ProdutoUnitario", 1354.547210845812, 80.540916358604);
      assertEquals(1354.547210845812, produtoQuilo0.getValor(), 0.01);
      assertEquals(80.540916358604, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("com.example.ProdutoUnitario", produtoQuilo0.getNome());
      assertEquals("com.example.ProdutoUnitario", produtoQuilo0.getCodigo());
      assertNotNull(produtoQuilo0);
      
      EstoqueDeProdutos.adicionarProduto(produtoQuilo0, 0.0);
      assertEquals(1354.547210845812, produtoQuilo0.getValor(), 0.01);
      assertEquals(80.540916358604, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("com.example.ProdutoUnitario", produtoQuilo0.getNome());
      assertEquals("com.example.ProdutoUnitario", produtoQuilo0.getCodigo());
      
      EstoqueDeProdutos.exibirEstoqueCliente();
      produtoQuilo0.setValor(0.0);
      assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      assertEquals(80.540916358604, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("com.example.ProdutoUnitario", produtoQuilo0.getNome());
      assertEquals("com.example.ProdutoUnitario", produtoQuilo0.getCodigo());
      
      produtoQuilo0.setValor(80.540916358604);
      assertEquals(80.540916358604, produtoQuilo0.getValor(), 0.01);
      assertEquals(80.540916358604, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("com.example.ProdutoUnitario", produtoQuilo0.getNome());
      assertEquals("com.example.ProdutoUnitario", produtoQuilo0.getCodigo());
      
      EstoqueDeProdutos.exibirEstoqueCliente();
      EstoqueDeProdutos.exibirCopiaInicialDoEstoque();
      ProdutoQuilo produtoQuilo1 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo0);
      assertEquals("com.example.ProdutoUnitario", produtoQuilo1.getCodigo());
      assertEquals("com.example.ProdutoUnitario", produtoQuilo1.getNome());
      assertEquals(80.540916358604, produtoQuilo1.getValor(), 0.01);
      assertEquals(80.540916358604, produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals(80.540916358604, produtoQuilo0.getValor(), 0.01);
      assertEquals(80.540916358604, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("com.example.ProdutoUnitario", produtoQuilo0.getNome());
      assertEquals("com.example.ProdutoUnitario", produtoQuilo0.getCodigo());
      assertNotNull(produtoQuilo1);
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertNotSame(produtoQuilo0, produtoQuilo1);
      
      produtoQuilo0.setNome("com.example.ProdutoUnitario");
      assertEquals(80.540916358604, produtoQuilo0.getValor(), 0.01);
      assertEquals(80.540916358604, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("com.example.ProdutoUnitario", produtoQuilo0.getNome());
      assertEquals("com.example.ProdutoUnitario", produtoQuilo0.getCodigo());
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertNotSame(produtoQuilo0, produtoQuilo1);
      
      EstoqueDeProdutos.adicionarProduto(produtoQuilo0, 81.85);
      assertEquals(80.540916358604, produtoQuilo0.getValor(), 0.01);
      assertEquals(80.540916358604, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("com.example.ProdutoUnitario", produtoQuilo0.getNome());
      assertEquals("com.example.ProdutoUnitario", produtoQuilo0.getCodigo());
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertNotSame(produtoQuilo0, produtoQuilo1);
      
      double double1 = EstoqueDeProdutos.precoPorCodigo("");
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      EstoqueDeProdutos.exibirCopiaInicialDoEstoque();
      EstoqueDeProdutos.removerProduto("", 80.540916358604);
      boolean boolean2 = EstoqueDeProdutos.produtoParaCompra("com.example.ProdutoUnitario", 0.0, (Boolean) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EstoqueDeProdutos.copiarEstoque();
      EstoqueDeProdutos.Feed();
      EstoqueDeProdutos.Feed();
      double double0 = EstoqueDeProdutos.precoPorCodigo("Mandioca");
      assertEquals(0.0, double0, 0.01);
      
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo((String) null, "Mandioca", 0.0, 0.0);
      assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertNull(produtoQuilo0.getCodigo());
      assertEquals("Mandioca", produtoQuilo0.getNome());
      assertNotNull(produtoQuilo0);
      
      EstoqueDeProdutos.removerProduto("Mandioca", 30.0);
      EstoqueDeProdutos.exibirEstoqueCliente();
      EstoqueDeProdutos.Feed();
      Produto produto0 = EstoqueDeProdutos.seekProduto((String) null);
      assertNull(produto0);
      
      EstoqueDeProdutos.exibirCopiaInicialDoEstoque();
      Produto produto1 = EstoqueDeProdutos.seekProduto("");
      assertNull(produto1);
      
      EstoqueDeProdutos.adicionarProduto(produtoQuilo0, 2045.00737);
      assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertNull(produtoQuilo0.getCodigo());
      assertEquals("Mandioca", produtoQuilo0.getNome());
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean boolean1 = EstoqueDeProdutos.produtoParaCompra("MDGcTB", (-1100.3532558279026), boolean0);
      assertFalse(boolean1);
      
      EstoqueDeProdutos.copiarEstoque();
      EstoqueDeProdutos.Feed();
      EstoqueDeProdutos.exibirCopiaInicialDoEstoque();
      Boolean boolean2 = new Boolean(false);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      boolean boolean3 = EstoqueDeProdutos.produtoParaCompra("", 0.0, boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      EstoqueDeProdutos.removerProduto("MDGcTB", 2045.00737);
      double double1 = EstoqueDeProdutos.precoPorCodigo("120");
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4.99, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ProdutoUnitario produtoUnitario0 = new ProdutoUnitario("140", "l", 3549.701072498994);
      assertEquals("l", produtoUnitario0.getNome());
      assertEquals("140", produtoUnitario0.getCodigo());
      assertEquals(3549.701072498994, produtoUnitario0.getValor(), 0.01);
      assertNotNull(produtoUnitario0);
      
      produtoUnitario0.setValor(3549.701072498994);
      assertEquals("l", produtoUnitario0.getNome());
      assertEquals("140", produtoUnitario0.getCodigo());
      assertEquals(3549.701072498994, produtoUnitario0.getValor(), 0.01);
      
      produtoUnitario0.setNome("com.example.Utilitario");
      assertEquals("140", produtoUnitario0.getCodigo());
      assertEquals("com.example.Utilitario", produtoUnitario0.getNome());
      assertEquals(3549.701072498994, produtoUnitario0.getValor(), 0.01);
      
      produtoUnitario0.setValor(3549.701072498994);
      assertEquals("140", produtoUnitario0.getCodigo());
      assertEquals("com.example.Utilitario", produtoUnitario0.getNome());
      assertEquals(3549.701072498994, produtoUnitario0.getValor(), 0.01);
      
      EstoqueDeProdutos.adicionarProduto(produtoUnitario0, 1612.8951881104);
      assertEquals("140", produtoUnitario0.getCodigo());
      assertEquals("com.example.Utilitario", produtoUnitario0.getNome());
      assertEquals(3549.701072498994, produtoUnitario0.getValor(), 0.01);
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean boolean1 = Boolean.logicalAnd(true, true);
      assertTrue(boolean1);
      
      boolean boolean2 = Boolean.logicalXor(true, false);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      int int0 = Boolean.compare(true, true);
      assertEquals(0, int0);
      
      int int1 = Boolean.compare(true, true);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean3 = Boolean.getBoolean("l");
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = EstoqueDeProdutos.produtoParaCompra("&uR//NM,8E4?7", 1612.8951881104, boolean0);
      assertTrue(boolean0.equals((Object)boolean2));
      assertFalse(boolean0.equals((Object)boolean3));
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4);
      
      EstoqueDeProdutos.removerProduto("&uR//NM,8E4?7", 3549.701072498994);
      boolean boolean5 = EstoqueDeProdutos.produtoParaCompra("140", 1612.8951881104, boolean0);
      assertTrue(boolean0.equals((Object)boolean2));
      assertFalse(boolean0.equals((Object)boolean4));
      assertFalse(boolean0.equals((Object)boolean3));
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5);
      
      EstoqueDeProdutos.adicionarProduto(produtoUnitario0, 0);
      assertEquals("140", produtoUnitario0.getCodigo());
      assertEquals("com.example.Utilitario", produtoUnitario0.getNome());
      assertEquals(3549.701072498994, produtoUnitario0.getValor(), 0.01);
      
      EstoqueDeProdutos.mostrarEstoque(0);
      EstoqueDeProdutos.mostrarEstoque((-1));
      Boolean boolean6 = Boolean.TRUE;
      assertNotNull(boolean6);
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6);
      
      boolean boolean7 = EstoqueDeProdutos.produtoParaCompra("140", 1623.0, boolean6);
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7 == boolean5);
      assertFalse(boolean7 == boolean2);
      assertFalse(boolean7 == boolean1);
      assertTrue(boolean7 == boolean4);
      assertFalse(boolean7);
      
      double double0 = EstoqueDeProdutos.precoPorCodigo("V|;qaHBA/:.");
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean8 = EstoqueDeProdutos.produtoParaCompra("&uR//NM,8E4?7", 1612.8951881104, boolean6);
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean7));
      assertTrue(boolean6.equals((Object)boolean2));
      assertFalse(boolean8 == boolean5);
      assertTrue(boolean8 == boolean4);
      assertTrue(boolean8 == boolean3);
      assertFalse(boolean8 == boolean1);
      assertFalse(boolean8 == boolean2);
      assertTrue(boolean8 == boolean7);
      assertFalse(boolean8);
      
      EstoqueDeProdutos.removerProduto("V|;qaHBA/:.", 32.0);
      EstoqueDeProdutos.adicionarProduto(produtoUnitario0, 32.0);
      assertEquals("140", produtoUnitario0.getCodigo());
      assertEquals("com.example.Utilitario", produtoUnitario0.getNome());
      assertEquals(3549.701072498994, produtoUnitario0.getValor(), 0.01);
      
      boolean boolean9 = EstoqueDeProdutos.produtoParaCompra("Ec+j5D6]%nAO^U']*L", 0, (Boolean) null);
      assertTrue(boolean9 == boolean4);
      assertTrue(boolean9 == boolean3);
      assertFalse(boolean9 == boolean5);
      assertTrue(boolean9 == boolean8);
      assertFalse(boolean9 == boolean2);
      assertFalse(boolean9 == boolean1);
      assertTrue(boolean9 == boolean7);
      assertFalse(boolean9);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EstoqueDeProdutos.mostrarEstoque(2289);
      ProdutoUnitario produtoUnitario0 = new ProdutoUnitario("z", "Carne de boi", 2289);
      assertEquals("z", produtoUnitario0.getCodigo());
      assertEquals("Carne de boi", produtoUnitario0.getNome());
      assertEquals(2289.0, produtoUnitario0.getValor(), 0.01);
      assertNotNull(produtoUnitario0);
      
      EstoqueDeProdutos.adicionarProduto(produtoUnitario0, 2289);
      assertEquals("z", produtoUnitario0.getCodigo());
      assertEquals("Carne de boi", produtoUnitario0.getNome());
      assertEquals(2289.0, produtoUnitario0.getValor(), 0.01);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean boolean1 = EstoqueDeProdutos.produtoParaCompra("z", 4301.766641472471, boolean0);
      assertFalse(boolean1);
      
      EstoqueDeProdutos.mostrarEstoque(2289);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EstoqueDeProdutos.Feed();
      EstoqueDeProdutos.mostrarEstoque(47);
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo("", "CSLcYE", 47, 0.0);
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(47.0, produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals("CSLcYE", produtoQuilo0.getNome());
      assertNotNull(produtoQuilo0);
      
      EstoqueDeProdutos.adicionarProduto(produtoQuilo0, 0.0);
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(47.0, produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals("CSLcYE", produtoQuilo0.getNome());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      Produto produto0 = EstoqueDeProdutos.seekProduto("");
      assertNull(produto0);
      
      int int0 = 2;
      // Undeclared exception!
      try { 
        EstoqueDeProdutos.mostrarEstoque(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EstoqueDeProdutos estoqueDeProdutos0 = new EstoqueDeProdutos();
      assertNotNull(estoqueDeProdutos0);
      
      EstoqueDeProdutos.Feed();
      Produto produto0 = EstoqueDeProdutos.seekProduto("20");
      assertEquals("Pacote de sal", produto0.getNome());
      assertEquals(0.95, produto0.getValor(), 0.01);
      assertEquals("20", produto0.getCodigo());
      assertNotNull(produto0);
      
      // Undeclared exception!
      try { 
        EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produto0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.example.ProdutoUnitario cannot be cast to com.example.ProdutoQuilo
         //
         verifyException("com.example.EstoqueDeProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean boolean1 = EstoqueDeProdutos.produtoParaCompra("130", 1.0, boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Produto produto0 = EstoqueDeProdutos.seekProduto("gAWf");
      assertNull(produto0);
      
      EstoqueDeProdutos.Feed();
      EstoqueDeProdutos.copiarEstoque();
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        EstoqueDeProdutos.adicionarProduto((Produto) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = EstoqueDeProdutos.produtoParaCompra("", (-1782.05936991705), boolean0);
      assertFalse(boolean1);
      
      Produto produto0 = EstoqueDeProdutos.seekProduto("dLX4 ");
      assertNull(produto0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EstoqueDeProdutos.mostrarEstoque(0);
      ProdutoUnitario produtoUnitario0 = new ProdutoUnitario("RgCM*Rw\"k", "MozR zZQOVxj@B{C!", 0);
      assertEquals(0.0, produtoUnitario0.getValor(), 0.01);
      assertEquals("MozR zZQOVxj@B{C!", produtoUnitario0.getNome());
      assertEquals("RgCM*Rw\"k", produtoUnitario0.getCodigo());
      assertNotNull(produtoUnitario0);
      
      produtoUnitario0.setValor(0);
      assertEquals(0.0, produtoUnitario0.getValor(), 0.01);
      assertEquals("MozR zZQOVxj@B{C!", produtoUnitario0.getNome());
      assertEquals("RgCM*Rw\"k", produtoUnitario0.getCodigo());
      
      produtoUnitario0.setCodigo("");
      assertEquals(0.0, produtoUnitario0.getValor(), 0.01);
      assertEquals("MozR zZQOVxj@B{C!", produtoUnitario0.getNome());
      assertEquals("", produtoUnitario0.getCodigo());
      
      EstoqueDeProdutos.adicionarProduto(produtoUnitario0, 3197.7);
      assertEquals(0.0, produtoUnitario0.getValor(), 0.01);
      assertEquals("MozR zZQOVxj@B{C!", produtoUnitario0.getNome());
      assertEquals("", produtoUnitario0.getCodigo());
      
      EstoqueDeProdutos estoqueDeProdutos0 = new EstoqueDeProdutos();
      assertNotNull(estoqueDeProdutos0);
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean boolean1 = EstoqueDeProdutos.produtoParaCompra((String) null, 0, boolean0);
      assertFalse(boolean1);
      
      EstoqueDeProdutos.removerProduto("MozR zZQOVxj@B{C!", 3197.7);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EstoqueDeProdutos.mostrarEstoque(0);
      double double0 = EstoqueDeProdutos.precoPorCodigo("");
      assertEquals(0.0, double0, 0.01);
      
      Produto produto0 = EstoqueDeProdutos.seekProduto("");
      assertNull(produto0);
      
      Produto produto1 = EstoqueDeProdutos.seekProduto("\bp_-!=\"Hfe2mh");
      assertNull(produto1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EstoqueDeProdutos.exibirEstoqueCliente();
      EstoqueDeProdutos.Feed();
      EstoqueDeProdutos.Feed();
      String string0 = "40";
      double double0 = 1.5;
      EstoqueDeProdutos.removerProduto("40", 1.5);
      EstoqueDeProdutos.exibirEstoqueCliente();
      EstoqueDeProdutos estoqueDeProdutos0 = new EstoqueDeProdutos();
      assertNotNull(estoqueDeProdutos0);
      
      Produto produto0 = EstoqueDeProdutos.seekProduto("a");
      assertNull(produto0);
      
      // Undeclared exception!
      try { 
        EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario((Produto) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.example.EstoqueDeProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EstoqueDeProdutos.Feed();
      Boolean boolean0 = Boolean.valueOf("+V<+BQ0pw=fB*y");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = Boolean.logicalAnd(true, false);
      assertFalse(boolean1);
      
      boolean boolean2 = EstoqueDeProdutos.produtoParaCompra("", 0.0, boolean0);
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      EstoqueDeProdutos.removerProduto("70", 0.0);
      EstoqueDeProdutos estoqueDeProdutos0 = new EstoqueDeProdutos();
      assertNotNull(estoqueDeProdutos0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo("0=", "0=", (-1.0), (-1.0));
      assertEquals((-1.0), produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("0=", produtoQuilo0.getCodigo());
      assertEquals("0=", produtoQuilo0.getNome());
      assertEquals((-1.0), produtoQuilo0.getValor(), 0.01);
      assertNotNull(produtoQuilo0);
      
      ProdutoQuilo produtoQuilo1 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo0);
      assertEquals((-1.0), produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("0=", produtoQuilo0.getCodigo());
      assertEquals("0=", produtoQuilo0.getNome());
      assertEquals((-1.0), produtoQuilo0.getValor(), 0.01);
      assertEquals("0=", produtoQuilo1.getCodigo());
      assertEquals("0=", produtoQuilo1.getNome());
      assertEquals((-1.0), produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals((-1.0), produtoQuilo1.getValor(), 0.01);
      assertNotNull(produtoQuilo1);
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo1, produtoQuilo0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EstoqueDeProdutos.exibirEstoqueCliente();
      String string0 = "";
      double double0 = 286.1755474809292;
      ProdutoUnitario produtoUnitario0 = new ProdutoUnitario("", (String) null, 286.1755474809292);
      assertNull(produtoUnitario0.getNome());
      assertEquals("", produtoUnitario0.getCodigo());
      assertEquals(286.1755474809292, produtoUnitario0.getValor(), 0.01);
      assertNotNull(produtoUnitario0);
      
      produtoUnitario0.setCodigo("w^YLV<p(3eo$#BG:#");
      assertNull(produtoUnitario0.getNome());
      assertEquals("w^YLV<p(3eo$#BG:#", produtoUnitario0.getCodigo());
      assertEquals(286.1755474809292, produtoUnitario0.getValor(), 0.01);
      
      // Undeclared exception!
      try { 
        EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoUnitario0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.example.ProdutoUnitario cannot be cast to com.example.ProdutoQuilo
         //
         verifyException("com.example.EstoqueDeProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EstoqueDeProdutos.mostrarEstoque(1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EstoqueDeProdutos.Feed();
      EstoqueDeProdutos.copiarEstoque();
      EstoqueDeProdutos.exibirCopiaInicialDoEstoque();
      EstoqueDeProdutos.exibirCopiaInicialDoEstoque();
      EstoqueDeProdutos.copiarEstoque();
      Produto produto0 = EstoqueDeProdutos.seekProduto("DYE z");
      assertNull(produto0);
      
      EstoqueDeProdutos.removerProduto("DYE z", 3.5);
      EstoqueDeProdutos.exibirCopiaInicialDoEstoque();
      EstoqueDeProdutos.copiarEstoque();
      EstoqueDeProdutos.mostrarEstoque((-1273));
      EstoqueDeProdutos.mostrarEstoque(0);
      EstoqueDeProdutos.mostrarEstoque((-1));
      double double0 = EstoqueDeProdutos.precoPorCodigo("DYE z");
      assertEquals(0.0, double0, 0.01);
      
      EstoqueDeProdutos.Feed();
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo("DYE z", "DYE z", 1149.0, 1149.0);
      assertEquals(1149.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("DYE z", produtoQuilo0.getCodigo());
      assertEquals("DYE z", produtoQuilo0.getNome());
      assertEquals(1149.0, produtoQuilo0.getValor(), 0.01);
      assertNotNull(produtoQuilo0);
      
      produtoQuilo0.setQtdQuilos(3.5);
      assertEquals("DYE z", produtoQuilo0.getCodigo());
      assertEquals("DYE z", produtoQuilo0.getNome());
      assertEquals(3.5, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(1149.0, produtoQuilo0.getValor(), 0.01);
      
      EstoqueDeProdutos.adicionarProduto(produtoQuilo0, 426.16877023);
      assertEquals("DYE z", produtoQuilo0.getCodigo());
      assertEquals("DYE z", produtoQuilo0.getNome());
      assertEquals(3.5, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(1149.0, produtoQuilo0.getValor(), 0.01);
      
      produtoQuilo0.setCodigo("Caf\u00E9");
      assertEquals("Caf\u00E9", produtoQuilo0.getCodigo());
      assertEquals("DYE z", produtoQuilo0.getNome());
      assertEquals(3.5, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(1149.0, produtoQuilo0.getValor(), 0.01);
      
      produtoQuilo0.setCodigo("");
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals("DYE z", produtoQuilo0.getNome());
      assertEquals(3.5, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(1149.0, produtoQuilo0.getValor(), 0.01);
      
      EstoqueDeProdutos.removerProduto("DYE z", 2189.7382206);
      EstoqueDeProdutos.adicionarProduto(produtoQuilo0, 45.0);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals("DYE z", produtoQuilo0.getNome());
      assertEquals(3.5, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(1149.0, produtoQuilo0.getValor(), 0.01);
      
      produtoQuilo0.setValor(0.0);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      assertEquals("DYE z", produtoQuilo0.getNome());
      assertEquals(3.5, produtoQuilo0.getQtdQuilos(), 0.01);
      
      produtoQuilo0.setValor((-1));
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals((-1.0), produtoQuilo0.getValor(), 0.01);
      assertEquals("DYE z", produtoQuilo0.getNome());
      assertEquals(3.5, produtoQuilo0.getQtdQuilos(), 0.01);
      
      EstoqueDeProdutos.adicionarProduto(produtoQuilo0, 3130.0);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals((-1.0), produtoQuilo0.getValor(), 0.01);
      assertEquals("DYE z", produtoQuilo0.getNome());
      assertEquals(3.5, produtoQuilo0.getQtdQuilos(), 0.01);
      
      // Undeclared exception!
      EstoqueDeProdutos.mostrarEstoque((-1273));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EstoqueDeProdutos.mostrarEstoque(1209);
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = EstoqueDeProdutos.produtoParaCompra("", 1209, boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = EstoqueDeProdutos.precoPorCodigo("!Z5/");
      assertEquals(0.0, double0, 0.01);
      
      ProdutoUnitario produtoUnitario0 = new ProdutoUnitario("30", "!Z5/", 0.0);
      assertEquals("30", produtoUnitario0.getCodigo());
      assertEquals("!Z5/", produtoUnitario0.getNome());
      assertEquals(0.0, produtoUnitario0.getValor(), 0.01);
      assertNotNull(produtoUnitario0);
      
      EstoqueDeProdutos.adicionarProduto(produtoUnitario0, 0.0);
      assertEquals("30", produtoUnitario0.getCodigo());
      assertEquals("!Z5/", produtoUnitario0.getNome());
      assertEquals(0.0, produtoUnitario0.getValor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = EstoqueDeProdutos.precoPorCodigo("com.example.Produto");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EstoqueDeProdutos.removerProduto(" [Kx5M3qz0V0", 2843.898716);
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo("Tomate", "Tomate", 2843.898716, 11.0);
      assertEquals(2843.898716, produtoQuilo0.getValor(), 0.01);
      assertEquals(11.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("Tomate", produtoQuilo0.getCodigo());
      assertEquals("Tomate", produtoQuilo0.getNome());
      assertNotNull(produtoQuilo0);
      
      ProdutoQuilo produtoQuilo1 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo0);
      assertEquals(2843.898716, produtoQuilo0.getValor(), 0.01);
      assertEquals(11.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("Tomate", produtoQuilo0.getCodigo());
      assertEquals("Tomate", produtoQuilo0.getNome());
      assertEquals("Tomate", produtoQuilo1.getNome());
      assertEquals(2843.898716, produtoQuilo1.getValor(), 0.01);
      assertEquals("Tomate", produtoQuilo1.getCodigo());
      assertEquals(11.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertNotNull(produtoQuilo1);
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      
      produtoQuilo1.setValor(2843.898716);
      assertEquals(2843.898716, produtoQuilo0.getValor(), 0.01);
      assertEquals(11.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("Tomate", produtoQuilo0.getCodigo());
      assertEquals("Tomate", produtoQuilo0.getNome());
      assertEquals("Tomate", produtoQuilo1.getNome());
      assertEquals(2843.898716, produtoQuilo1.getValor(), 0.01);
      assertEquals("Tomate", produtoQuilo1.getCodigo());
      assertEquals(11.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      
      ProdutoQuilo produtoQuilo2 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo1);
      assertEquals(2843.898716, produtoQuilo0.getValor(), 0.01);
      assertEquals(11.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("Tomate", produtoQuilo0.getCodigo());
      assertEquals("Tomate", produtoQuilo0.getNome());
      assertEquals("Tomate", produtoQuilo1.getNome());
      assertEquals(2843.898716, produtoQuilo1.getValor(), 0.01);
      assertEquals("Tomate", produtoQuilo1.getCodigo());
      assertEquals(11.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals(2843.898716, produtoQuilo2.getValor(), 0.01);
      assertEquals("Tomate", produtoQuilo2.getNome());
      assertEquals("Tomate", produtoQuilo2.getCodigo());
      assertEquals(11.0, produtoQuilo2.getQtdQuilos(), 0.01);
      assertNotNull(produtoQuilo2);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo0));
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertNotSame(produtoQuilo2, produtoQuilo1);
      assertNotSame(produtoQuilo2, produtoQuilo0);
      
      Produto produto0 = EstoqueDeProdutos.seekProduto("com.example.ProdutoUnitario");
      assertNull(produto0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Produto produto0 = null;
      double double0 = 413.75524;
      // Undeclared exception!
      try { 
        EstoqueDeProdutos.adicionarProduto((Produto) null, 413.75524);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Produto produto0 = null;
      // Undeclared exception!
      try { 
        EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario((Produto) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.example.EstoqueDeProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        EstoqueDeProdutos.exibirCopiaInicialDoEstoque();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Produto produto0 = EstoqueDeProdutos.seekProduto("com.example.Produto");
      assertNull(produto0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo("{vv", "{vv", 297.80338, 297.80338);
      assertEquals(297.80338, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("{vv", produtoQuilo0.getCodigo());
      assertEquals("{vv", produtoQuilo0.getNome());
      assertEquals(297.80338, produtoQuilo0.getValor(), 0.01);
      assertNotNull(produtoQuilo0);
      
      ProdutoQuilo produtoQuilo1 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo0);
      assertEquals(297.80338, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("{vv", produtoQuilo0.getCodigo());
      assertEquals("{vv", produtoQuilo0.getNome());
      assertEquals(297.80338, produtoQuilo0.getValor(), 0.01);
      assertEquals(297.80338, produtoQuilo1.getValor(), 0.01);
      assertEquals("{vv", produtoQuilo1.getCodigo());
      assertEquals("{vv", produtoQuilo1.getNome());
      assertEquals(297.80338, produtoQuilo1.getQtdQuilos(), 0.01);
      assertNotNull(produtoQuilo1);
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      
      ProdutoQuilo produtoQuilo2 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo1);
      assertEquals(297.80338, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("{vv", produtoQuilo0.getCodigo());
      assertEquals("{vv", produtoQuilo0.getNome());
      assertEquals(297.80338, produtoQuilo0.getValor(), 0.01);
      assertEquals(297.80338, produtoQuilo1.getValor(), 0.01);
      assertEquals("{vv", produtoQuilo1.getCodigo());
      assertEquals("{vv", produtoQuilo1.getNome());
      assertEquals(297.80338, produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals(297.80338, produtoQuilo2.getQtdQuilos(), 0.01);
      assertEquals(297.80338, produtoQuilo2.getValor(), 0.01);
      assertEquals("{vv", produtoQuilo2.getNome());
      assertEquals("{vv", produtoQuilo2.getCodigo());
      assertNotNull(produtoQuilo2);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo0));
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertNotSame(produtoQuilo2, produtoQuilo1);
      assertNotSame(produtoQuilo2, produtoQuilo0);
      
      produtoQuilo0.setCodigo("61");
      assertEquals(297.80338, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("{vv", produtoQuilo0.getNome());
      assertEquals(297.80338, produtoQuilo0.getValor(), 0.01);
      assertEquals("61", produtoQuilo0.getCodigo());
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      
      produtoQuilo0.setQtdQuilos(12.0);
      assertEquals("{vv", produtoQuilo0.getNome());
      assertEquals(297.80338, produtoQuilo0.getValor(), 0.01);
      assertEquals(12.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("61", produtoQuilo0.getCodigo());
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      
      Boolean boolean0 = Boolean.valueOf("\"(@aL(q_>;hP4FJc}");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = Boolean.logicalXor(true, true);
      assertFalse(boolean1);
      
      boolean boolean2 = Boolean.logicalAnd(true, true);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      int int0 = Boolean.compare(true, false);
      assertEquals(1, int0);
      
      boolean boolean3 = Boolean.logicalAnd(true, false);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = Boolean.logicalOr(true, true);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4);
      
      boolean boolean5 = EstoqueDeProdutos.produtoParaCompra("90", 1.5, boolean0);
      assertFalse(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean3));
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean4));
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5);
      
      ProdutoQuilo produtoQuilo3 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo1);
      assertEquals("{vv", produtoQuilo0.getNome());
      assertEquals(297.80338, produtoQuilo0.getValor(), 0.01);
      assertEquals(12.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("61", produtoQuilo0.getCodigo());
      assertEquals(297.80338, produtoQuilo1.getValor(), 0.01);
      assertEquals("{vv", produtoQuilo1.getCodigo());
      assertEquals("{vv", produtoQuilo1.getNome());
      assertEquals(297.80338, produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals("{vv", produtoQuilo3.getCodigo());
      assertEquals(297.80338, produtoQuilo3.getQtdQuilos(), 0.01);
      assertEquals(297.80338, produtoQuilo3.getValor(), 0.01);
      assertEquals("{vv", produtoQuilo3.getNome());
      assertNotNull(produtoQuilo3);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo1));
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo3);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertNotSame(produtoQuilo1, produtoQuilo3);
      assertNotSame(produtoQuilo3, produtoQuilo2);
      assertNotSame(produtoQuilo3, produtoQuilo0);
      assertNotSame(produtoQuilo3, produtoQuilo1);
      
      produtoQuilo3.setQtdQuilos(100.0);
      assertEquals("{vv", produtoQuilo0.getNome());
      assertEquals(297.80338, produtoQuilo0.getValor(), 0.01);
      assertEquals(12.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("61", produtoQuilo0.getCodigo());
      assertEquals(297.80338, produtoQuilo1.getValor(), 0.01);
      assertEquals("{vv", produtoQuilo1.getCodigo());
      assertEquals("{vv", produtoQuilo1.getNome());
      assertEquals(297.80338, produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals("{vv", produtoQuilo3.getCodigo());
      assertEquals(100.0, produtoQuilo3.getQtdQuilos(), 0.01);
      assertEquals(297.80338, produtoQuilo3.getValor(), 0.01);
      assertEquals("{vv", produtoQuilo3.getNome());
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo3));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo3));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo1));
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo3);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertNotSame(produtoQuilo1, produtoQuilo3);
      assertNotSame(produtoQuilo3, produtoQuilo2);
      assertNotSame(produtoQuilo3, produtoQuilo0);
      assertNotSame(produtoQuilo3, produtoQuilo1);
      
      Produto produto0 = EstoqueDeProdutos.seekProduto("\"(@aL(q_>;hP4FJc}");
      assertNull(produto0);
      
      EstoqueDeProdutos.adicionarProduto(produtoQuilo3, 297.80338);
      assertEquals("{vv", produtoQuilo0.getNome());
      assertEquals(297.80338, produtoQuilo0.getValor(), 0.01);
      assertEquals(12.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("61", produtoQuilo0.getCodigo());
      assertEquals(297.80338, produtoQuilo1.getValor(), 0.01);
      assertEquals("{vv", produtoQuilo1.getCodigo());
      assertEquals("{vv", produtoQuilo1.getNome());
      assertEquals(297.80338, produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals("{vv", produtoQuilo3.getCodigo());
      assertEquals(100.0, produtoQuilo3.getQtdQuilos(), 0.01);
      assertEquals(297.80338, produtoQuilo3.getValor(), 0.01);
      assertEquals("{vv", produtoQuilo3.getNome());
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo3));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo3));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo3.equals((Object)produtoQuilo1));
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo3);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertNotSame(produtoQuilo1, produtoQuilo3);
      assertNotSame(produtoQuilo3, produtoQuilo2);
      assertNotSame(produtoQuilo3, produtoQuilo0);
      assertNotSame(produtoQuilo3, produtoQuilo1);
      
      produtoQuilo0.setCodigo("' possui apenas produtos '");
      assertEquals("{vv", produtoQuilo0.getNome());
      assertEquals(297.80338, produtoQuilo0.getValor(), 0.01);
      assertEquals(12.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("' possui apenas produtos '", produtoQuilo0.getCodigo());
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo3));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo3);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      
      EstoqueDeProdutos.removerProduto("90", 1.5);
      double double0 = EstoqueDeProdutos.precoPorCodigo("{vv");
      assertEquals(297.80338, double0, 0.01);
      
      ProdutoQuilo produtoQuilo4 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo0);
      assertEquals("{vv", produtoQuilo0.getNome());
      assertEquals(297.80338, produtoQuilo0.getValor(), 0.01);
      assertEquals(12.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("' possui apenas produtos '", produtoQuilo0.getCodigo());
      assertEquals("' possui apenas produtos '", produtoQuilo4.getCodigo());
      assertEquals(12.0, produtoQuilo4.getQtdQuilos(), 0.01);
      assertEquals(297.80338, produtoQuilo4.getValor(), 0.01);
      assertEquals("{vv", produtoQuilo4.getNome());
      assertNotNull(produtoQuilo4);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo3));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo4.equals((Object)produtoQuilo3));
      assertFalse(produtoQuilo4.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo4.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo4.equals((Object)produtoQuilo0));
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo3);
      assertNotSame(produtoQuilo0, produtoQuilo4);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertNotSame(produtoQuilo4, produtoQuilo3);
      assertNotSame(produtoQuilo4, produtoQuilo2);
      assertNotSame(produtoQuilo4, produtoQuilo1);
      assertNotSame(produtoQuilo4, produtoQuilo0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo("", "", (-328.6829), 0.0);
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertEquals((-328.6829), produtoQuilo0.getValor(), 0.01);
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getCodigo());
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getNome());
      //  // Unstable assertion: assertNotNull(produtoQuilo0);
      
      ProdutoQuilo produtoQuilo1 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo0);
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertEquals((-328.6829), produtoQuilo0.getValor(), 0.01);
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getCodigo());
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getNome());
      //  // Unstable assertion: assertEquals("", produtoQuilo1.getCodigo());
      //  // Unstable assertion: assertEquals("", produtoQuilo1.getNome());
      //  // Unstable assertion: assertEquals((-328.6829), produtoQuilo1.getValor(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertNotNull(produtoQuilo1);
      //  // Unstable assertion: assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo1);
      //  // Unstable assertion: assertNotSame(produtoQuilo1, produtoQuilo0);
      
      produtoQuilo0.setValor(0.0);
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getCodigo());
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getNome());
      //  // Unstable assertion: assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo1);
      
      produtoQuilo0.setValor((-328.6829));
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertEquals((-328.6829), produtoQuilo0.getValor(), 0.01);
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getCodigo());
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getNome());
      //  // Unstable assertion: assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo1);
      
      produtoQuilo0.setValor((-5127.61139492));
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertEquals((-5127.61139492), produtoQuilo0.getValor(), 0.01);
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getCodigo());
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getNome());
      //  // Unstable assertion: assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo1);
      
      produtoQuilo1.setValor((-5127.61139492));
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertEquals((-5127.61139492), produtoQuilo0.getValor(), 0.01);
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getCodigo());
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getNome());
      //  // Unstable assertion: assertEquals((-5127.61139492), produtoQuilo1.getValor(), 0.01);
      //  // Unstable assertion: assertEquals("", produtoQuilo1.getCodigo());
      //  // Unstable assertion: assertEquals("", produtoQuilo1.getNome());
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      //  // Unstable assertion: assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo1);
      //  // Unstable assertion: assertNotSame(produtoQuilo1, produtoQuilo0);
      
      produtoQuilo0.setQtdQuilos(0.0);
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertEquals((-5127.61139492), produtoQuilo0.getValor(), 0.01);
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getCodigo());
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getNome());
      //  // Unstable assertion: assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo1);
      
      EstoqueDeProdutos.adicionarProduto(produtoQuilo0, 60.0);
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertEquals((-5127.61139492), produtoQuilo0.getValor(), 0.01);
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getCodigo());
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getNome());
      //  // Unstable assertion: assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo1);
      
      produtoQuilo1.setNome("");
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertEquals((-5127.61139492), produtoQuilo0.getValor(), 0.01);
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getCodigo());
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getNome());
      //  // Unstable assertion: assertEquals((-5127.61139492), produtoQuilo1.getValor(), 0.01);
      //  // Unstable assertion: assertEquals("", produtoQuilo1.getCodigo());
      //  // Unstable assertion: assertEquals("", produtoQuilo1.getNome());
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      //  // Unstable assertion: assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo1);
      //  // Unstable assertion: assertNotSame(produtoQuilo1, produtoQuilo0);
      
      produtoQuilo0.setValor(0.0);
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getCodigo());
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getNome());
      //  // Unstable assertion: assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo1);
      
      ProdutoQuilo produtoQuilo2 = (ProdutoQuilo)EstoqueDeProdutos.seekProduto("");
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo2.getValor(), 0.01);
      //  // Unstable assertion: assertEquals("", produtoQuilo2.getCodigo());
      //  // Unstable assertion: assertEquals("", produtoQuilo2.getNome());
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo2.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertNotNull(produtoQuilo2);
      //  // Unstable assertion: assertFalse(produtoQuilo2.equals((Object)produtoQuilo1));
      //  // Unstable assertion: assertFalse(produtoQuilo2.equals((Object)produtoQuilo0));
      //  // Unstable assertion: assertNotSame(produtoQuilo2, produtoQuilo1);
      //  // Unstable assertion: assertNotSame(produtoQuilo2, produtoQuilo0);
      
      ProdutoQuilo produtoQuilo3 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo2);
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo2.getValor(), 0.01);
      //  // Unstable assertion: assertEquals("", produtoQuilo2.getCodigo());
      //  // Unstable assertion: assertEquals("", produtoQuilo2.getNome());
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo2.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo3.getValor(), 0.01);
      //  // Unstable assertion: assertEquals("", produtoQuilo3.getCodigo());
      //  // Unstable assertion: assertEquals("", produtoQuilo3.getNome());
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo3.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertNotNull(produtoQuilo3);
      //  // Unstable assertion: assertFalse(produtoQuilo2.equals((Object)produtoQuilo1));
      //  // Unstable assertion: assertFalse(produtoQuilo2.equals((Object)produtoQuilo0));
      //  // Unstable assertion: assertFalse(produtoQuilo3.equals((Object)produtoQuilo0));
      //  // Unstable assertion: assertFalse(produtoQuilo3.equals((Object)produtoQuilo1));
      //  // Unstable assertion: assertFalse(produtoQuilo3.equals((Object)produtoQuilo2));
      //  // Unstable assertion: assertNotSame(produtoQuilo2, produtoQuilo1);
      //  // Unstable assertion: assertNotSame(produtoQuilo2, produtoQuilo0);
      //  // Unstable assertion: assertNotSame(produtoQuilo2, produtoQuilo3);
      //  // Unstable assertion: assertNotSame(produtoQuilo3, produtoQuilo0);
      //  // Unstable assertion: assertNotSame(produtoQuilo3, produtoQuilo1);
      //  // Unstable assertion: assertNotSame(produtoQuilo3, produtoQuilo2);
      
      EstoqueDeProdutos.removerProduto("I3R>ots(", 60.0);
      produtoQuilo1.setNome("");
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getCodigo());
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getNome());
      //  // Unstable assertion: assertEquals((-5127.61139492), produtoQuilo1.getValor(), 0.01);
      //  // Unstable assertion: assertEquals("", produtoQuilo1.getCodigo());
      //  // Unstable assertion: assertEquals("", produtoQuilo1.getNome());
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertFalse(produtoQuilo0.equals((Object)produtoQuilo3));
      //  // Unstable assertion: assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      //  // Unstable assertion: assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      //  // Unstable assertion: assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      //  // Unstable assertion: assertFalse(produtoQuilo1.equals((Object)produtoQuilo3));
      //  // Unstable assertion: assertFalse(produtoQuilo1.equals((Object)produtoQuilo2));
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo3);
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo1);
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo2);
      //  // Unstable assertion: assertNotSame(produtoQuilo1, produtoQuilo0);
      //  // Unstable assertion: assertNotSame(produtoQuilo1, produtoQuilo3);
      //  // Unstable assertion: assertNotSame(produtoQuilo1, produtoQuilo2);
      
      ProdutoQuilo produtoQuilo4 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo1);
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getCodigo());
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getNome());
      //  // Unstable assertion: assertEquals((-5127.61139492), produtoQuilo1.getValor(), 0.01);
      //  // Unstable assertion: assertEquals("", produtoQuilo1.getCodigo());
      //  // Unstable assertion: assertEquals("", produtoQuilo1.getNome());
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertEquals((-5127.61139492), produtoQuilo4.getValor(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo4.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertEquals("", produtoQuilo4.getCodigo());
      //  // Unstable assertion: assertEquals("", produtoQuilo4.getNome());
      //  // Unstable assertion: assertNotNull(produtoQuilo4);
      //  // Unstable assertion: assertFalse(produtoQuilo0.equals((Object)produtoQuilo3));
      //  // Unstable assertion: assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      //  // Unstable assertion: assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      //  // Unstable assertion: assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      //  // Unstable assertion: assertFalse(produtoQuilo1.equals((Object)produtoQuilo3));
      //  // Unstable assertion: assertFalse(produtoQuilo1.equals((Object)produtoQuilo2));
      //  // Unstable assertion: assertFalse(produtoQuilo4.equals((Object)produtoQuilo1));
      //  // Unstable assertion: assertFalse(produtoQuilo4.equals((Object)produtoQuilo2));
      //  // Unstable assertion: assertFalse(produtoQuilo4.equals((Object)produtoQuilo3));
      //  // Unstable assertion: assertFalse(produtoQuilo4.equals((Object)produtoQuilo0));
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo3);
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo1);
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo2);
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo4);
      //  // Unstable assertion: assertNotSame(produtoQuilo1, produtoQuilo0);
      //  // Unstable assertion: assertNotSame(produtoQuilo1, produtoQuilo3);
      //  // Unstable assertion: assertNotSame(produtoQuilo1, produtoQuilo2);
      //  // Unstable assertion: assertNotSame(produtoQuilo1, produtoQuilo4);
      //  // Unstable assertion: assertNotSame(produtoQuilo4, produtoQuilo1);
      //  // Unstable assertion: assertNotSame(produtoQuilo4, produtoQuilo2);
      //  // Unstable assertion: assertNotSame(produtoQuilo4, produtoQuilo3);
      //  // Unstable assertion: assertNotSame(produtoQuilo4, produtoQuilo0);
      
      ProdutoQuilo produtoQuilo5 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo0);
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getCodigo());
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getNome());
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo5.getValor(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo5.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertEquals("", produtoQuilo5.getNome());
      //  // Unstable assertion: assertEquals("", produtoQuilo5.getCodigo());
      //  // Unstable assertion: assertNotNull(produtoQuilo5);
      //  // Unstable assertion: assertFalse(produtoQuilo0.equals((Object)produtoQuilo3));
      //  // Unstable assertion: assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      //  // Unstable assertion: assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      //  // Unstable assertion: assertFalse(produtoQuilo0.equals((Object)produtoQuilo4));
      //  // Unstable assertion: assertFalse(produtoQuilo5.equals((Object)produtoQuilo3));
      //  // Unstable assertion: assertFalse(produtoQuilo5.equals((Object)produtoQuilo2));
      //  // Unstable assertion: assertFalse(produtoQuilo5.equals((Object)produtoQuilo4));
      //  // Unstable assertion: assertFalse(produtoQuilo5.equals((Object)produtoQuilo1));
      //  // Unstable assertion: assertFalse(produtoQuilo5.equals((Object)produtoQuilo0));
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo3);
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo5);
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo1);
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo2);
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo4);
      //  // Unstable assertion: assertNotSame(produtoQuilo5, produtoQuilo3);
      //  // Unstable assertion: assertNotSame(produtoQuilo5, produtoQuilo2);
      //  // Unstable assertion: assertNotSame(produtoQuilo5, produtoQuilo4);
      //  // Unstable assertion: assertNotSame(produtoQuilo5, produtoQuilo1);
      //  // Unstable assertion: assertNotSame(produtoQuilo5, produtoQuilo0);
      
      produtoQuilo1.setNome("");
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getCodigo());
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getNome());
      //  // Unstable assertion: assertEquals((-5127.61139492), produtoQuilo1.getValor(), 0.01);
      //  // Unstable assertion: assertEquals("", produtoQuilo1.getCodigo());
      //  // Unstable assertion: assertEquals("", produtoQuilo1.getNome());
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertFalse(produtoQuilo0.equals((Object)produtoQuilo3));
      //  // Unstable assertion: assertFalse(produtoQuilo0.equals((Object)produtoQuilo5));
      //  // Unstable assertion: assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      //  // Unstable assertion: assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      //  // Unstable assertion: assertFalse(produtoQuilo0.equals((Object)produtoQuilo4));
      //  // Unstable assertion: assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      //  // Unstable assertion: assertFalse(produtoQuilo1.equals((Object)produtoQuilo3));
      //  // Unstable assertion: assertFalse(produtoQuilo1.equals((Object)produtoQuilo5));
      //  // Unstable assertion: assertFalse(produtoQuilo1.equals((Object)produtoQuilo2));
      //  // Unstable assertion: assertFalse(produtoQuilo1.equals((Object)produtoQuilo4));
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo3);
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo5);
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo1);
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo2);
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo4);
      //  // Unstable assertion: assertNotSame(produtoQuilo1, produtoQuilo0);
      //  // Unstable assertion: assertNotSame(produtoQuilo1, produtoQuilo3);
      //  // Unstable assertion: assertNotSame(produtoQuilo1, produtoQuilo5);
      //  // Unstable assertion: assertNotSame(produtoQuilo1, produtoQuilo2);
      //  // Unstable assertion: assertNotSame(produtoQuilo1, produtoQuilo4);
      
      EstoqueDeProdutos.copiarEstoque();
      EstoqueDeProdutos.exibirEstoqueCliente();
      EstoqueDeProdutos estoqueDeProdutos0 = new EstoqueDeProdutos();
      //  // Unstable assertion: assertNotNull(estoqueDeProdutos0);
      
      produtoQuilo0.setValor(0.0);
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getCodigo());
      //  // Unstable assertion: assertEquals("", produtoQuilo0.getNome());
      //  // Unstable assertion: assertFalse(produtoQuilo0.equals((Object)produtoQuilo3));
      //  // Unstable assertion: assertFalse(produtoQuilo0.equals((Object)produtoQuilo5));
      //  // Unstable assertion: assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      //  // Unstable assertion: assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      //  // Unstable assertion: assertFalse(produtoQuilo0.equals((Object)produtoQuilo4));
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo3);
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo5);
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo1);
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo2);
      //  // Unstable assertion: assertNotSame(produtoQuilo0, produtoQuilo4);
      
      // Undeclared exception!
      try { 
        EstoqueDeProdutos.Feed();
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EstoqueDeProdutos.copiarEstoque();
      EstoqueDeProdutos.exibirCopiaInicialDoEstoque();
      EstoqueDeProdutos.exibirEstoqueCliente();
      EstoqueDeProdutos.Feed();
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo("", "", (-347.5618885941274), (-347.5618885941274));
      assertEquals((-347.5618885941274), produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo0.getNome());
      assertEquals((-347.5618885941274), produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getCodigo());
      assertNotNull(produtoQuilo0);
      
      ProdutoQuilo produtoQuilo1 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo0);
      assertEquals((-347.5618885941274), produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo0.getNome());
      assertEquals((-347.5618885941274), produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals("", produtoQuilo1.getNome());
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals((-347.5618885941274), produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals((-347.5618885941274), produtoQuilo1.getValor(), 0.01);
      assertNotNull(produtoQuilo1);
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      
      ProdutoQuilo produtoQuilo2 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo1);
      assertEquals((-347.5618885941274), produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("", produtoQuilo0.getNome());
      assertEquals((-347.5618885941274), produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals("", produtoQuilo1.getNome());
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals((-347.5618885941274), produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals((-347.5618885941274), produtoQuilo1.getValor(), 0.01);
      assertEquals("", produtoQuilo2.getNome());
      assertEquals("", produtoQuilo2.getCodigo());
      assertEquals((-347.5618885941274), produtoQuilo2.getQtdQuilos(), 0.01);
      assertEquals((-347.5618885941274), produtoQuilo2.getValor(), 0.01);
      assertNotNull(produtoQuilo2);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo2.equals((Object)produtoQuilo0));
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      assertNotSame(produtoQuilo2, produtoQuilo1);
      assertNotSame(produtoQuilo2, produtoQuilo0);
      
      produtoQuilo0.setNome("nv-h20Reer");
      assertEquals((-347.5618885941274), produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("nv-h20Reer", produtoQuilo0.getNome());
      assertEquals((-347.5618885941274), produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getCodigo());
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      
      produtoQuilo1.setValor(221.0);
      assertEquals((-347.5618885941274), produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("nv-h20Reer", produtoQuilo0.getNome());
      assertEquals((-347.5618885941274), produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals("", produtoQuilo1.getNome());
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals((-347.5618885941274), produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals(221.0, produtoQuilo1.getValor(), 0.01);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      
      produtoQuilo1.setValor(221.0);
      assertEquals((-347.5618885941274), produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("nv-h20Reer", produtoQuilo0.getNome());
      assertEquals((-347.5618885941274), produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals("", produtoQuilo1.getNome());
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals((-347.5618885941274), produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals(221.0, produtoQuilo1.getValor(), 0.01);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      
      produtoQuilo1.setQtdQuilos(1111.7359608432992);
      assertEquals((-347.5618885941274), produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("nv-h20Reer", produtoQuilo0.getNome());
      assertEquals((-347.5618885941274), produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals("", produtoQuilo1.getNome());
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals(221.0, produtoQuilo1.getValor(), 0.01);
      assertEquals(1111.7359608432992, produtoQuilo1.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      
      EstoqueDeProdutos.adicionarProduto(produtoQuilo1, 4729.49794371147);
      assertEquals((-347.5618885941274), produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("nv-h20Reer", produtoQuilo0.getNome());
      assertEquals((-347.5618885941274), produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getCodigo());
      assertEquals("", produtoQuilo1.getNome());
      assertEquals("", produtoQuilo1.getCodigo());
      assertEquals(221.0, produtoQuilo1.getValor(), 0.01);
      assertEquals(1111.7359608432992, produtoQuilo1.getQtdQuilos(), 0.01);
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo2));
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo2);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      
      EstoqueDeProdutos.removerProduto("", 0.0);
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = Boolean.logicalAnd(true, true);
      assertTrue(boolean1);
      
      boolean boolean2 = EstoqueDeProdutos.produtoParaCompra("", 221.0, boolean0);
      assertFalse(boolean0.equals((Object)boolean1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      EstoqueDeProdutos.adicionarProduto(produtoQuilo0, 30.0);
      assertEquals((-347.5618885941274), produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals("nv-h20Reer", produtoQuilo0.getNome());
      assertEquals((-347.5618885941274), produtoQuilo0.getValor(), 0.01);
      assertEquals("", produtoQuilo0.getCodigo());
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo1));
      assertFalse(produtoQuilo0.equals((Object)produtoQuilo2));
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo0, produtoQuilo2);
      
      Produto produto0 = EstoqueDeProdutos.seekProduto((String) null);
      assertNull(produto0);
      
      EstoqueDeProdutos.exibirCopiaInicialDoEstoque();
      EstoqueDeProdutos.copiarEstoque();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo("kYT]Nh@%Nu4!6", "kYT]Nh@%Nu4!6", 35.0, 35.0);
      assertEquals(35.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(35.0, produtoQuilo0.getValor(), 0.01);
      assertEquals("kYT]Nh@%Nu4!6", produtoQuilo0.getNome());
      assertEquals("kYT]Nh@%Nu4!6", produtoQuilo0.getCodigo());
      assertNotNull(produtoQuilo0);
      
      produtoQuilo0.setValor(0.0);
      assertEquals(35.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      assertEquals("kYT]Nh@%Nu4!6", produtoQuilo0.getNome());
      assertEquals("kYT]Nh@%Nu4!6", produtoQuilo0.getCodigo());
      
      produtoQuilo0.setQtdQuilos(0.0);
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      assertEquals("kYT]Nh@%Nu4!6", produtoQuilo0.getNome());
      assertEquals("kYT]Nh@%Nu4!6", produtoQuilo0.getCodigo());
      
      produtoQuilo0.setCodigo("");
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      assertEquals("kYT]Nh@%Nu4!6", produtoQuilo0.getNome());
      assertEquals("", produtoQuilo0.getCodigo());
      
      produtoQuilo0.setCodigo("kYT]Nh@%Nu4!6");
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(0.0, produtoQuilo0.getValor(), 0.01);
      assertEquals("kYT]Nh@%Nu4!6", produtoQuilo0.getNome());
      assertEquals("kYT]Nh@%Nu4!6", produtoQuilo0.getCodigo());
      
      produtoQuilo0.setValor(35.0);
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(35.0, produtoQuilo0.getValor(), 0.01);
      assertEquals("kYT]Nh@%Nu4!6", produtoQuilo0.getNome());
      assertEquals("kYT]Nh@%Nu4!6", produtoQuilo0.getCodigo());
      
      produtoQuilo0.setCodigo("Ma\u00E7\u00E3");
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals(35.0, produtoQuilo0.getValor(), 0.01);
      assertEquals("Ma\u00E7\u00E3", produtoQuilo0.getCodigo());
      assertEquals("kYT]Nh@%Nu4!6", produtoQuilo0.getNome());
      
      produtoQuilo0.setValor((-1394.33));
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals((-1394.33), produtoQuilo0.getValor(), 0.01);
      assertEquals("Ma\u00E7\u00E3", produtoQuilo0.getCodigo());
      assertEquals("kYT]Nh@%Nu4!6", produtoQuilo0.getNome());
      
      ProdutoQuilo produtoQuilo1 = EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario(produtoQuilo0);
      assertEquals(0.0, produtoQuilo0.getQtdQuilos(), 0.01);
      assertEquals((-1394.33), produtoQuilo0.getValor(), 0.01);
      assertEquals("Ma\u00E7\u00E3", produtoQuilo0.getCodigo());
      assertEquals("kYT]Nh@%Nu4!6", produtoQuilo0.getNome());
      assertEquals((-1394.33), produtoQuilo1.getValor(), 0.01);
      assertEquals(0.0, produtoQuilo1.getQtdQuilos(), 0.01);
      assertEquals("kYT]Nh@%Nu4!6", produtoQuilo1.getNome());
      assertEquals("Ma\u00E7\u00E3", produtoQuilo1.getCodigo());
      assertNotNull(produtoQuilo1);
      assertFalse(produtoQuilo1.equals((Object)produtoQuilo0));
      assertNotSame(produtoQuilo0, produtoQuilo1);
      assertNotSame(produtoQuilo1, produtoQuilo0);
      
      EstoqueDeProdutos.Feed();
      // Undeclared exception!
      try { 
        EstoqueDeProdutos.exibirCopiaInicialDoEstoque();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EstoqueDeProdutos.removerProduto("/1TyU^*k", 31.4623824);
      Produto produto0 = EstoqueDeProdutos.seekProduto("/1TyU^*k");
      assertNull(produto0);
      
      EstoqueDeProdutos.copiarEstoque();
      EstoqueDeProdutos.Feed();
      double double0 = EstoqueDeProdutos.precoPorCodigo("/1TyU^*k");
      assertEquals(0.0, double0, 0.01);
      
      double double1 = EstoqueDeProdutos.precoPorCodigo("-h");
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      EstoqueDeProdutos.mostrarEstoque(3027);
      Produto produto1 = EstoqueDeProdutos.seekProduto("");
      assertNull(produto1);
      
      double double2 = EstoqueDeProdutos.precoPorCodigo("~(k]`,");
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      EstoqueDeProdutos.Feed();
      EstoqueDeProdutos.mostrarEstoque(3027);
      Produto produto2 = EstoqueDeProdutos.seekProduto("~(k]`,");
      assertNull(produto2);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = Boolean.logicalOr(false, false);
      assertFalse(boolean1);
      
      boolean boolean2 = EstoqueDeProdutos.produtoParaCompra("com.example.Produto", 0.0, boolean0);
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      EstoqueDeProdutos.copiarEstoque();
      double double3 = EstoqueDeProdutos.precoPorCodigo("P2\"g}h\"h\"{0`@' 84cA");
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      EstoqueDeProdutos.Feed();
      Produto produto3 = EstoqueDeProdutos.seekProduto("10");
      assertEquals(2.5, produto3.getValor(), 0.01);
      assertEquals("Leite", produto3.getNome());
      assertEquals("10", produto3.getCodigo());
      assertNotNull(produto3);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EstoqueDeProdutos.copiarEstoque();
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo("6d-", "6d-", 46.6669857, 46.6669857);
      produtoQuilo0.setNome("com.example.Produto");
      produtoQuilo0.setValor(46.6669857);
      produtoQuilo0.setNome("6d-");
      produtoQuilo0.setCodigo("6d-");
      produtoQuilo0.setCodigo("com.example.Produto");
      produtoQuilo0.setNome(":rPJt:CY*U");
      EstoqueDeProdutos.adicionarProduto(produtoQuilo0, (-153.446718646148));
      produtoQuilo0.setCodigo(":rPJt:CY*U");
      EstoqueDeProdutos.Feed();
      EstoqueDeProdutos.removerProduto(":rPJt:CY*U", (-153.446718646148));
      EstoqueDeProdutos.adicionarProduto(produtoQuilo0, (-980.888283));
      double double0 = EstoqueDeProdutos.precoPorCodigo(":rPJt:CY*U");
      assertEquals(46.6669857, double0, 0.01);
      
      EstoqueDeProdutos.exibirEstoqueCliente();
      Boolean boolean0 = Boolean.valueOf(false);
      Boolean.logicalOr(false, false);
      Boolean.compare(false, false);
      Boolean.logicalAnd(true, true);
      Boolean.logicalXor(true, false);
      boolean boolean1 = EstoqueDeProdutos.produtoParaCompra(":rPJt:CY*U", 0.0, boolean0);
      Boolean boolean2 = Boolean.TRUE;
      boolean boolean3 = EstoqueDeProdutos.produtoParaCompra(":rPJt:CY*U", 952.51, boolean2);
      assertFalse(boolean3 == boolean1);
      
      EstoqueDeProdutos.exibirEstoqueCliente();
      Produto produto0 = EstoqueDeProdutos.seekProduto("com.example.Produto");
      assertNotNull(produto0);
      assertEquals(46.6669857, produto0.getValor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EstoqueDeProdutos.copiarEstoque();
      ProdutoQuilo produtoQuilo0 = new ProdutoQuilo("6d-", "6d-", 46.6669857, 46.6669857);
      produtoQuilo0.setNome("com.example.Produto");
      produtoQuilo0.setValor(46.6669857);
      produtoQuilo0.setNome("6d-");
      produtoQuilo0.setCodigo("6d-");
      produtoQuilo0.setCodigo("com.example.Produto");
      produtoQuilo0.setNome(":rPJt:CY*U");
      EstoqueDeProdutos.adicionarProduto(produtoQuilo0, (-153.446718646148));
      produtoQuilo0.setCodigo(":rPJt:CY*U");
      EstoqueDeProdutos.Feed();
      EstoqueDeProdutos.removerProduto(":rPJt:CY*U", (-153.446718646148));
      EstoqueDeProdutos.adicionarProduto(produtoQuilo0, (-980.888283));
      EstoqueDeProdutos.precoPorCodigo(":rPJt:CY*U");
      EstoqueDeProdutos.exibirEstoqueCliente();
      Boolean boolean0 = Boolean.valueOf(false);
      Boolean.logicalOr(false, false);
      Boolean.compare(false, false);
      Boolean.logicalAnd(false, true);
      Boolean.logicalXor(false, false);
      EstoqueDeProdutos.produtoParaCompra(":rPJt:CY*U", 0.0, boolean0);
      Boolean boolean1 = Boolean.TRUE;
      EstoqueDeProdutos.produtoParaCompra(":rPJt:CY*U", 952.51, boolean1);
      EstoqueDeProdutos.exibirEstoqueCliente();
      EstoqueDeProdutos.seekProduto("com.example.Produto");
      EstoqueDeProdutos.mostrarEstoque(0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EstoqueDeProdutos.exibirEstoqueCliente();
      EstoqueDeProdutos.Feed();
      String string0 = "40";
      double double0 = 89.0;
      EstoqueDeProdutos.removerProduto("40", 89.0);
      EstoqueDeProdutos.exibirEstoqueCliente();
      EstoqueDeProdutos estoqueDeProdutos0 = new EstoqueDeProdutos();
      EstoqueDeProdutos.seekProduto("a");
      // Undeclared exception!
      try { 
        EstoqueDeProdutos.ObtenhaProdutoQuiloTemporario((Produto) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.example.EstoqueDeProdutos", e);
      }
  }
}
